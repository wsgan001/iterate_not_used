---
author: evo
comments: true
date: 2018-05-18 11:22:41+00:00
layout: post
link: http://106.15.37.116/2018/05/18/%e7%ae%97%e6%b3%95%ef%bc%9a%e5%a4%8d%e6%9d%82%e9%93%be%e8%a1%a8%e7%9a%84%e5%a4%8d%e5%88%b6/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e5%a4%8d%e6%9d%82%e9%93%be%e8%a1%a8%e7%9a%84%e5%a4%8d%e5%88%b6'
title: 算法：复杂链表的复制
wordpress_id: 5984
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## **题目描述**


输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点）。要求你编写函数复制这个复杂链表。**好吧，竟然有这种链表，用在什么地方的？**

一个复杂链表类似如下：


![](http://106.15.37.116/wp-content/uploads/2018/05/img_5afe9919b3701.png)





# 题目解答




## 暴力方法


最简单暴力的方法：

很明显，链表分成两个部分，一个是下一个节点组成的链表，另一个特殊指针的链接。

那么我们的复制操作可以分成两个部分：



 	
  * 复制正常的链表指针域 这个操作比较简单，因为链表的下一个指针为形成一个串的，我们从头开始即可遍历所有的结点

 	
  * 复制随机的指针域 这个操作有点麻烦，由于指针是随机指向的，因此无法通过一趟遍历来实现，这里我们采用暴力的方式， 由于指针的位置是一一对应的，我们查找到原来的随机指针域在新链表中对应位置（\(O(N)\)），而我们遍历一遍将所有的随机指针都复制则需要 \(O(N^2)\)。


代码如下：

    
    #include <iostream>
    #include <vector>
    using namespace std;
    
    
    
    struct RandomListNode {
    	int label;
    	struct RandomListNode *next;
    	struct RandomListNode *random;
    	RandomListNode(int x=0) :
    		label(x), next(NULL),random(NULL) {
    	}
    };
    
    
    class Solution {
    public:
    
    	RandomListNode* FindRandNodeInNewList(RandomListNode *oldHead, 
    		RandomListNode *newHead, 
    		RandomListNode *randNode) {
    
    		RandomListNode *oldNode = oldHead;
    		RandomListNode *newNode = newHead;
    		//开始往前遍历
    		while (oldNode != NULL && newNode != NULL) {
    			if (randNode == oldNode) {
    				return newNode;
    			}
    			oldNode = oldNode->next;
    			newNode = newNode->next;
    		}
    
    		return NULL;
    	}
    
    
    
    	// 复制链表  总体是两次遍历，但是实际上在查找random的时候，每个都要遍历依次
    	RandomListNode* Clone(RandomListNode* oldHead) {
    		if (oldHead == NULL) {
    			return NULL;
    		}
    
    		RandomListNode *oldNode = oldHead;
    		RandomListNode *newHead = NULL, *preNode = NULL, *newNode = NULL;
    
    		// 首先复制原链表的普通指针域, 一次遍历即可完成
    		while (oldNode != NULL) {
    			newNode = new RandomListNode(oldNode->label);
    			if (preNode == NULL) {
    				newHead = newNode;
    			}
    			else {
    				preNode->next = newNode;
    			}
    			preNode = newNode;
    			oldNode = oldNode->next;
    		}
    
    		//  接着复制随机指针域
    		oldNode = oldHead;
    		newNode = newHead;
    		while (oldNode != NULL && newNode != NULL) {
    			//设定node的random指针
    			RandomListNode *oldRandNode = oldNode->random;                        
    			RandomListNode *newRandNode = FindRandNodeInNewList(oldHead, newHead, oldRandNode);  
    			newNode->random = newRandNode;
    			// 往前移动
    			oldNode = oldNode->next;
    			newNode = newNode->next;
    		}
    		return newHead;
    	}
    
    };
    
    void PrintNode(RandomListNode* root) {
    	RandomListNode *node = root;
    	while (node != NULL) {
    		if (node->next != NULL) {
    			cout << node->label << " ---> " << node->next->label << endl;
    		}
    		if (node->random != NULL) {
    			cout << node->label << " ---> " << node->random->label << endl;
    		}
    		node = node->next;
    	}
    	cout << endl;
    }
    
    
    int main() {
    	//准备链表
    	RandomListNode node_list[5];
    
    	node_list[0].label = 0;
    	node_list[0].next = &node_list[1];
    	node_list[0].random = &node_list[2];
    
    	node_list[1].label = 1;
    	node_list[1].next = &node_list[2];
    	node_list[1].random = &node_list[4];
    
    	node_list[2].label = 2;
    	node_list[2].next = &node_list[3];
    	node_list[2].random = NULL;
    
    	node_list[3].label = 3;
    	node_list[3].next = &node_list[4];
    	node_list[3].random = &node_list[1];
    
    	node_list[4].label = 4;
    	node_list[4].next = NULL;
    	node_list[4].random = &node_list[2];
    
    
    	//打印原始链表
    	cout << "原始链表："<<endl;
    	PrintNode(&node_list[0]);
    
    
    
    	//打印复制的链表
    	Solution solu;
    	RandomListNode *root_new = solu.Clone(&node_list[0]);
    	cout << "复制的链表：" << endl;
    	PrintNode(root_new);
    	return 0;
    }
    


输出：

    
    原始链表：
    0 ---> 1
    0 ---> 2
    1 ---> 2
    1 ---> 4
    2 ---> 3
    3 ---> 4
    3 ---> 1
    4 ---> 2
    
    复制的链表：
    0 ---> 1
    0 ---> 2
    1 ---> 2
    1 ---> 4
    2 ---> 3
    3 ---> 4
    3 ---> 1
    4 ---> 2




其实分析一下子就知道我们的暴力解法的性能缺陷在哪里：

我们每次复制随机指针的时候，找到 newHead 指向的新链表中与原来链表 oldHead 的 randNode 节点对应的那个节点时，需要同步遍历两个链表，这个过程是 \(O(n)\) 的。

那么有没有什么方法把这个动作的时间复杂度降低到 \(O(1)\) 呢？




## 用 map 来存储新旧链表的节点对应关系 -- 空间换取时间


由于新旧链表中的节点是一一对应的，因此我们可以用一个空间换时间的方法，用一个 map 或者 hashtable 在顺序遍历的时候，存储 oldNode 和 newNode 之间的这个映射关系。这样，我就能根据 oldNode 快速找到 newNode 。

    
    #include <iostream>
    #include <vector>
    #include <map>
    using namespace std;
    
    
    
    struct RandomListNode {
    	int label;
    	struct RandomListNode *next;
    	struct RandomListNode *random;
    	RandomListNode(int x = 0) :
    		label(x), next(NULL), random(NULL) {
    	}
    };
    
    class Solution {
    public:
    	RandomListNode* Clone(RandomListNode* oldHead) {
    		if (oldHead == NULL) {
    			return NULL;
    		}
    		map<RandomListNode *, RandomListNode *> nodeMap;
    
    		RandomListNode *oldNode = oldHead;
    		RandomListNode *newHead = NULL, *preNode = NULL, *newNode = NULL;
    
    		//首先复制原链表的普通指针域, 一次遍历即可完成
    		while (oldNode != NULL) {
    			newNode = new RandomListNode(oldNode->label);
    			nodeMap[oldNode] = newNode; //把 oldNode 和 newNode 放到 map 里面
    			if (preNode == NULL) {
    				newHead = newNode;
    			}
    			else {
    				preNode->next = newNode;
    			}
    			preNode = newNode;
    			oldNode = oldNode->next;
    		}
    
    		//  接着复制随机指针域
    		oldNode = oldHead;
    		newNode = newHead;
    		while (oldNode != NULL && newNode != NULL) {
    			RandomListNode *oldRandNode = oldNode->random;
    			//这里就不用查找了，直接从map里把oldNode对应的newNode拿出来就行。还是很厉害的
    			RandomListNode *newRandNode = nodeMap[oldRandNode];
    			newNode->random = newRandNode;
    
    			//向前遍历
    			oldNode = oldNode->next;
    			newNode = newNode->next;
    		}
    		return newHead;
    	}
    };
    
    void PrintNode(RandomListNode* root) {
    	RandomListNode *node = root;
    	while (node != NULL) {
    		if (node->next != NULL) {
    			cout << node->label << " ---> " << node->next->label << endl;
    		}
    		if (node->random != NULL) {
    			cout << node->label << " ---> " << node->random->label << endl;
    		}
    		node = node->next;
    	}
    	cout << endl;
    }
    
    
    int main() {
    	//准备链表
    	RandomListNode node_list[5];
    
    	node_list[0].label = 0;
    	node_list[0].next = &node_list[1];
    	node_list[0].random = &node_list[2];
    
    	node_list[1].label = 1;
    	node_list[1].next = &node_list[2];
    	node_list[1].random = &node_list[4];
    
    	node_list[2].label = 2;
    	node_list[2].next = &node_list[3];
    	node_list[2].random = NULL;
    
    	node_list[3].label = 3;
    	node_list[3].next = &node_list[4];
    	node_list[3].random = &node_list[1];
    
    	node_list[4].label = 4;
    	node_list[4].next = NULL;
    	node_list[4].random = &node_list[2];
    
    
    	//打印原始链表
    	cout << "原始链表：" << endl;
    	PrintNode(&node_list[0]);
    
    
    
    	//打印复制的链表
    	Solution solu;
    	RandomListNode *root_new = solu.Clone(&node_list[0]);
    	cout << "复制的链表：" << endl;
    	PrintNode(root_new);
    	return 0;
    }


输出：

    
    原始链表：
    0 ---> 1
    0 ---> 2
    1 ---> 2
    1 ---> 4
    2 ---> 3
    3 ---> 4
    3 ---> 1
    4 ---> 2
    
    复制的链表：
    0 ---> 1
    0 ---> 2
    1 ---> 2
    1 ---> 4
    2 ---> 3
    3 ---> 4
    3 ---> 1
    4 ---> 2


**map 的力量真的是利害，这种使用的 map 作为一个查询机制或者绑定机制，能省很多的遍历查询，利害。要好好总结下map的基本用法，和map在那些算法中起到过方便作用，总结一下。**

上面这种方法中，我们用 map 来存储新旧链表中结点的对应关系，这样对于一个有 N 个节点的链表，我么就用了一个大小为 \(O(N)\) 的 map 的空间消耗将时间复杂度从\(O(N^2)\) 降到了 \(O(N)\)  。

看起来应该是很厉害的方法了。

那么还有没有什么方法，能够在不用辅助空间的情况下实现 \(O(N)\) 的时间效率呢？即把空间复杂度也降下来？

利害了：




## 用 next 指针域关联新旧结点


我们发现，其实我们之所以使用 map 就是为了建立新节点与原节点之前的对应关系。

当链表中顺序访问的时候，能够直接通过 next 查找下一个节点，那么如果我们将新节点直接插入到原结点的后面，不是可以很方便的通过原来的节点找到新节点吗？

具体我们算法的流程如下：



 	
  1. 首先，我们遍历一遍原始链表，复制结点 N 对应的 N'，将其插入到结点 N 的后面，如下图所示




![](http://106.15.37.116/wp-content/uploads/2018/05/img_5afeb2639db92.png)






 	
  2. 然后，确定每个随机指针的指向，只需遍历一遍链表即可确定每个结点的随机指针的指向，得到如下图结构 （**这个图是错的，但是文字意思是对的**）




![](http://106.15.37.116/wp-content/uploads/2018/05/img_5afeb295f3591.png)






 	
  3. 然后，再次遍历一遍，将原始链表和复制链表分开，奇数为原始链表，偶数为复制链表，得到如下图型


![](http://106.15.37.116/wp-content/uploads/2018/05/img_5afeb2d14d4dd.png)



完整代码如下：

    
    #include <iostream>
    #include <vector>
    #include <map>
    using namespace std;
    
    
    
    struct RandomListNode {
    	int label;
    	struct RandomListNode *next;
    	struct RandomListNode *random;
    	RandomListNode(int x = 0) :
    		label(x), next(NULL), random(NULL) {
    	}
    };
    
    class Solution {
    public:
    	//利害，三步走，很清晰
    	RandomListNode* Clone(RandomListNode* oldHead) {
    		if (oldHead == NULL) {
    			return NULL;
    		}
    		RandomListNode *oldNode = oldHead;
    		RandomListNode *newHead = NULL, *preNode = NULL, *newNode = NULL;
    
    		//首先复制原链表的普通指针域  
    		while (oldNode != NULL) {
    			newNode = new RandomListNode(oldNode->label);
    
    			//将新的节点链接杂原来节点的末尾
    			newNode->next = oldNode->next;
    			oldNode->next = newNode;
    
    			oldNode = newNode->next;//继续下一个
    		}
    
    
    		// 接着复制随机指针域
    		oldNode = oldHead;
    		while (oldNode != NULL) {
    			//准备好 oldRandNode 和 newNode 。
    			RandomListNode *oldRandNode = oldNode->random; 
    			RandomListNode *newNode = oldNode->next;
    
    			//设定 newNode 的 random 指针
    			if (oldRandNode != NULL) {
    				newNode->random = oldRandNode->next;
    			}
    			else {
    				newNode->random = NULL;
    			}
    			// 继续向后移动
    			oldNode = newNode->next;
    		}
    
    		// 将新旧链表拆分开来
    		oldNode = oldHead;
    		newNode = newHead = oldHead->next;
    		while (oldNode != NULL) {
    			//更新oldNode的next指针
    			oldNode->next = newNode->next;
    			cout << oldNode->label << " ,  " << newNode->label << endl;
    			//更新newNode的next指针
    			if (newNode->next != NULL) {
    				newNode->next = newNode->next->next;
    			}
    			else {
    				newNode->next = NULL;
    			}
    			//向后滑动
    			oldNode = oldNode->next;
    			newNode = newNode->next;
    		}
    		cout << endl;
    		return newHead;
    	}
    
    };
    
    void PrintNode(RandomListNode* root) {
    	RandomListNode *node = root;
    	while (node != NULL) {
    		if (node->next != NULL) {
    			cout << node->label << " ---> " << node->next->label << endl;
    		}
    		if (node->random != NULL) {
    			cout << node->label << " ---> " << node->random->label << endl;
    		}
    		node = node->next;
    	}
    	cout << endl;
    }
    
    
    int main() {
    	//准备链表
    	RandomListNode node_list[5];
    
    	node_list[0].label = 0;
    	node_list[0].next = &node_list[1];
    	node_list[0].random = &node_list[2];
    
    	node_list[1].label = 1;
    	node_list[1].next = &node_list[2];
    	node_list[1].random = &node_list[4];
    
    	node_list[2].label = 2;
    	node_list[2].next = &node_list[3];
    	node_list[2].random = NULL;
    
    	node_list[3].label = 3;
    	node_list[3].next = &node_list[4];
    	node_list[3].random = &node_list[1];
    
    	node_list[4].label = 4;
    	node_list[4].next = NULL;
    	node_list[4].random = &node_list[2];
    
    
    	//打印原始链表
    	cout << "原始链表：" << endl;
    	PrintNode(&node_list[0]);
    
    
    	//打印复制的链表
    	Solution solu;
    	RandomListNode *root_new = solu.Clone(&node_list[0]);
    	cout << "复制的链表：" << endl;
    	PrintNode(root_new);
    	return 0;
    }
    


输出如下：

    
    原始链表：
    0 ---> 1
    0 ---> 2
    1 ---> 2
    1 ---> 4
    2 ---> 3
    3 ---> 4
    3 ---> 1
    4 ---> 2
    
    0 ,  0
    1 ,  1
    2 ,  2
    3 ,  3
    4 ,  4
    
    复制的链表：
    0 ---> 1
    0 ---> 2
    1 ---> 2
    1 ---> 4
    2 ---> 3
    3 ---> 4
    3 ---> 1
    4 ---> 2


非常精彩，三步走的非常清晰。利害的。









* * *





# COMMENT



