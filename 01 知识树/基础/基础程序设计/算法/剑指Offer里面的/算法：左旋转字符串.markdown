---
author: evo
comments: true
date: 2018-05-27 13:44:46+00:00
layout: post
link: http://106.15.37.116/2018/05/27/%e7%ae%97%e6%b3%95%ef%bc%9a%e5%b7%a6%e6%97%8b%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e5%b7%a6%e6%97%8b%e8%bd%ac%e5%ad%97%e7%ac%a6%e4%b8%b2'
title: 算法：左旋转字符串
wordpress_id: 6927
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa




# 题目




## **题目描述**


汇编语言中有一种移位指令叫做循环左移（ROL）

现在有个简单的任务，就是用字符串模拟这个指令的运算结果。 对于一个给定的字符序列 S，请你把其循环左移 K 位后的序列输出。

例如，字符序列S=”abcXYZdef”, 要求输出循环左移3位后的结果，即“XYZdefabc”。




# 题目解答




## 直接找到旋转后的对应关系


我们可以很明显的发现，将一个字符串循环左移，那么新串和原来串位的对应关系就如下



 	
  * 新串 i 位置的元素，其实是原来串 i+n 位置的元素，当然 i+n 如果超过了字符串的长度，就会被循环移位到左侧，即 (i+n) % str.size()

 	
  * 另外，如果移位 n 超过了字符串长度，那么只需要移动 n%str.size() 位即可


代码如下：

    
    #include <iostream>
    #include <string>
    using namespace std;
    
    
    class Solution {
    public:
    
    	// 012345678
    	// abcXYZdef
    	// XYZdefabc
    	// 012345678
    
    	string LeftRotateString(string str, int n) {
    		if (str.size() == 0) {
    			return "";
    		}
    		string res(str);
    		if (n > str.size()) {
    			n %= str.size();//太大的时候，只需要移动余数位数就行
    		}
    		cout << "length = " << str.size() << ", n = " << n << endl;
    		for (int i = 0; i < str.size(); i++) {
    			//把原来的字符串中的对应字符放到新的字符串里
    			cout << "i = " << i << ", ori = " << ((i + n) % str.size()) << endl;
    			res[i] = str[(i + n) % str.size()];
    		}
    		return res;
    	}
    
    
    };
    
    
    int main() {
    	Solution solu;
    	string str = solu.LeftRotateString("abcXYZdef", 3);
    	cout << str << endl;
    	return 0;
    }


输出：

    
    length = 9, n = 3
    i = 0, ori = 3
    i = 1, ori = 4
    i = 2, ori = 5
    i = 3, ori = 6
    i = 4, ori = 7
    i = 5, ori = 8
    i = 6, ori = 0
    i = 7, ori = 1
    i = 8, ori = 2
    XYZdefabc




## 新串其实可以看作是 str+str 拼接后的第 n 位到第 n+str.size() 位的子串


这个很好理解，由于是循环移位，那么对于 abcXYZdef ，考虑他的自连接串 abcXYZdefabcXYZdef，新的串正好是链接串的一个子串，这时直接 substr 就行。

代码如下：

    
    #include <iostream>
    #include <string>
    using namespace std;
    
    
    class Solution {
    public:
    	// abcXYZdef
    	// abcXYZdefabcXYZdef
    	// 012345678
    	// 新的串是两倍串第len位起始长度为n字串
    
    	string LeftRotateString(string str, int n) {
    		int length = str.size();
    		if (length == 0) {
    			return "";
    		}
    		n = n % length;
    		str += str;
    		return str.substr(n, length);
    	}
    };
    
    
    int main() {
    	Solution solu;
    	string str = solu.LeftRotateString("abcXYZdef", 3);
    	cout << str << endl;
    	return 0;
    }


输出：

    
    XYZdefabc


嗯，上面的方法看起来已经很好了，难道还有别的方法吗？


## 通过翻转直线循环移位


通过 reverse 操作 一个序列 abcdefg，如果向左循环移动n位， 例如3位，则会编程(defg)(abc)，我们把原序列分成两部分，A=(abc)，B=(defg)，原序列为AB，我们要的结果为BA，则可以这么做：(ArBr)r = ((B)r)r((A)r)r=BA 假设原序列有 n 位，循环左移 i 位的过程如下：



 	
  1. reverse(0,i-1);

 	
  2. reverse(i,n-1);

 	
  3. reverse(1,n-1);


例如原序列：abcdefg，循环左移3位：

 	
  1. abc defg -=> cba defg

 	
  2. cba defg -=> cba gfed

 	
  3. cba gfed -=> defg abc


厉害呀，这样代码就非常比较简单了，而且 reverse 操作非常简单，效率高也不容易出错。

要记住的一点就是 STL 中的迭代器是左闭右开区间，所以reverse操作的第二个参数需要往后移动一位。**嗯，这个还是要注意的。**

不使用迭代器的话如下：

    
    #include <iostream>
    #include <string>
    using namespace std;
    
    
    class Solution {
    public:
    	string LeftRotateString(string str, int n) {
    		if (str.size() == 0) {
    			return "";
    		}
    		n %= str.size();
    		Reverse(str, 0, n - 1);
    		Reverse(str, n, str.size() - 1);
    		Reverse(str, 0, str.size() - 1);
    		return str;
    	}
    	//注意 Reverse 函数的实现
    	void Reverse(string &str, int left, int right) {
    		while (left < right) {
    			swap(str[left], str[right]);
    			left++;
    			right--;
    		}
    	}
    };
    
    
    int main() {
    	Solution solu;
    	string str = solu.LeftRotateString("abcXYZdef", 3);
    	cout << str << endl;
    	return 0;
    }


输出：

    
    XYZdefabc








* * *





# COMMENT



