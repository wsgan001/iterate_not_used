---
author: evo
comments: true
date: 2018-05-19 01:17:50+00:00
layout: post
link: http://106.15.37.116/2018/05/19/%e7%ae%97%e6%b3%95%ef%bc%9a%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e4%b8%8e%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e4%ba%8c%e5%8f%89%e6%90%9c%e7%b4%a2%e6%a0%91%e4%b8%8e%e5%8f%8c%e5%90%91%e9%93%be%e8%a1%a8'
title: 算法：二叉搜索树与双向链表
wordpress_id: 5979
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * **基本上就看了一个，还不是特别清楚，其它的虽然差不多但各有不同，还是要看下的。**





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## **题目描述**


输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。**什么叫把二叉搜索树变成一个排序的双向链表？**




# 题目解答


首先，我们要知道二叉搜索树和双向链表的一些信息：



 	
  * 二叉排序树的每个节点均由两个指针指向其两个孩子，双向链表中每个节点又都有两个指针指向其前驱和后继

 	
  * 二叉排序树的左节点的值 < 根结点的值 < 右子节点的值，其中序遍历就是一个排序好的信息串。**嗯，这个要知道。**


因此，我们可以通过如下两种方法来实现：

 	
  * 中序遍历来实现二叉搜索树向双向链表的转换，访问过程需修改为链接操作

 	
  * 把左子树和右子树都转换成排序的双向链表之后再和根节点链接起来，整棵二叉搜索树就转换成了排序的双向链表。**嗯，这也是一种方法，利害的。**


OK，下面我们就实现这两种方法：


## 中序遍历方法


我们现对原来的二叉排序树进行中序遍历，而中序遍历中当前结点的前一个节点



 	
  * 要么是当前结点的左子树的的最右孩子

 	
  * 要么是当前结点其前一个节点的右孩子


对于第二种，我们好判断，但是对于第一种方式，无法快速的找到其左子树的最右孩子，因此我们链接的时候需要保存其前驱节点，我们称之为 lastNode 节点


### 中序递归  用递归函数的参数保存 lastNode 节点


在我们的递归函数中，我们用 lastNode 保存前一个访问的节点，我们采用中序访问的方式，将访问当前结点 currNode 的操作转换为将当前节点 currNode 与前一个节点 lastNode 链接成链表的方式。

由于我们每次需要更新 lastNode 的值，因为我们传递的参数是指向 lastNode 的指针 pLastNode 。

    
    #include <iostream>
    using namespace std;
    
    
    
    
    struct TreeNode {
    	int val;
    	struct TreeNode *left;
    	struct TreeNode *right;
    };
    
    
    
    
    class Solution {
    
    public:
    
    	TreeNode* Convert(TreeNode* pTreeRoot) {
    		if (pTreeRoot == NULL) {
    			return NULL;
    		}
    		TreeNode *pLastNode = NULL;
    		ConvertRecursion(pTreeRoot, &pLastNode);
    
    		// 当递归结束后,*pLastNode指向了双向链表的尾结点
    		TreeNode *node = pLastNode;
    		while (pLastNode != NULL&& pLastNode->left != NULL) {
    			pLastNode = pLastNode->left;
    		}
    		return pLastNode;
    	}
    
    	//递归的将root为根的二叉排序树转化为双向链表
    	//**pLastNode为什么是 **指针？
    	//pLastNode里面指向的地址一直在变
    	void ConvertRecursion(TreeNode *pTreeRoot, TreeNode **pLastNode) {
    		if (pTreeRoot == NULL) {
    			return;
    		}
    		TreeNode *pCurrentNode = pTreeRoot;//pCurrentNode 相当于一棵小树的根节点
    
    		/****************   先递归到左子树里面去  *********************/
    		//对于一个根结点来说，它的紧接着的一个Node就是这个根节点的左子树的右子树的最后一个，
    		//可见，一开始，程序运行到这里的时候，最深处的嵌套里面，pTreeRoot就是最左子树的最左，pLastNode就是NULL
    		if (pCurrentNode->left != NULL) {
    			ConvertRecursion(pTreeRoot->left, pLastNode);
    		}
    
    
    		/*********   然后调整LastNode与CurrentNode之间的位置  ******************/
    		//把LastNode放到CurrentNode的左边 链接成一个链表
    		pCurrentNode->left = *pLastNode; //将左子树指向传进来的LastNode
    		if (*pLastNode != NULL) {
    			(*pLastNode)->right = pCurrentNode;//嗯，把LastNode的右设定为最左 
    		}
    		else {
    			cout << "lastNode is NULL" << endl;//LastNode是空的的话就不用放了
    		}
    		//这个时候，这个LastNode和CurrentNode就排好了，LastNode 在 CurrentNode 的左边
    		cout << ((*pLastNode == NULL) ? -1 : (*pLastNode)->val) 
    			<< ", " << pCurrentNode->val << endl;
    
    
    		/********  然后更新LastNode，并且顺便遍历右子树  ***************/
    		//对于右子树来说，它的紧接着的一个Node就是CurrentNode这个根节点
    		//把传递进来的LastNode设定为自己
    		*pLastNode = pCurrentNode;//C++ 中的指针还是要弄清楚
    
    		//  开始遍历根结点的右子树
    		if (pCurrentNode->right != NULL) {
    			ConvertRecursion(pCurrentNode->right, pLastNode);
    		}
    	}
    };
    
    
    
    int main() {
    	//    4
    	//  3   5
    	//2
    	TreeNode tree[4];
    	tree[0].val = 4;
    	tree[0].left = &tree[1];
    	tree[0].right = &tree[2];
    	tree[1].val = 3;
    	tree[1].left = &tree[3];
    	tree[1].right = NULL;
    	tree[2].val = 5;
    	tree[2].left = NULL;
    	tree[2].right = NULL;
    	tree[3].val = 2;
    	tree[3].left = NULL;
    	tree[3].right = NULL;
    
    
    	Solution solu;
    	TreeNode *head = solu.Convert(tree);
    	while (head != NULL) {
    		cout << head->val << " ";
    		head = head->right;
    	}
    	return 0;
    }


输出：

    
    lastNode is NULL
    -1, 2
    2, 3
    3, 4
    4, 5
    2 3 4 5


很好的程序，很nice，**没太看懂，要再看下。**


### 在上面的递归的过程中，把 pLastNode 参数改为用 static 局部变量存储


之前我们在 [二叉树中和为某一值的路径](http://106.15.37.116/2018/05/18/%e7%ae%97%e6%b3%95%ef%bc%9a%e4%ba%8c%e5%8f%89%e6%a0%91%e4%b8%ad%e5%92%8c%e4%b8%ba%e6%9f%90%e4%b8%aa%e5%80%bc%e7%9a%84%e8%b7%af%e5%be%84/)  中用递归方法写的时候，我们把递归的参数 path 用了一个static 的局部变量来存储，那么这次可不可以呢？

在这里我们的尝试没有成功，因为这里当一次转换完成，lastNode 并没有被清掉，因此进行下一次转换之前我们的结果会跟上一次的结果串在一起。**程序没有仔细看，要看下，这个是可以解决的吗？**

    
    #include <iostream>
    using namespace std;
    
    
    
    
    struct TreeNode {
    	int val;
    	struct TreeNode *left;
    	struct TreeNode *right;
    };
    
    
    class Solution {
    public:
    
    	TreeNode* Convert(TreeNode* pTreeRoot) {
    		if (pTreeRoot == NULL) {
    			return NULL;
    		}
    		TreeNode *pLastNode = ConvertRecursion(pTreeRoot);
    
    		// 当递归结束后,*pLastNode指向了双向链表的尾结点
    		TreeNode *node = pLastNode;
    		while (pLastNode != NULL&& pLastNode->left != NULL) {
    			pLastNode = pLastNode->left;
    		}
    		return pLastNode;
    	}
    
    
    	TreeNode* ConvertRecursion(TreeNode *pTreeRoot) {
    		if (pTreeRoot == NULL) {
    			return NULL;
    		}
    		TreeNode *pCurrentNode = pTreeRoot;
    		static TreeNode *spLastNode = NULL;
    		/// 首先中序 递归左子树
    		if (pCurrentNode->left != NULL) {
    			spLastNode = ConvertRecursion(pTreeRoot->left);
    		}
    
    
    		//开始访问根节点 在这里访问的过程演变为将左子树的根与根节点链接成一个链表
    		pCurrentNode->left = spLastNode;
    		if (spLastNode != NULL) {
    			spLastNode->right = pCurrentNode;
    		}
    		else {
    			cout << "lastNode is NULL" << endl;
    		}
    		cout << ((spLastNode == NULL) ? -1 : spLastNode->val) << ", " << pCurrentNode->val << endl;
    
    		//  更新上一个访问的指针域
    		//  由于要更新前一个指针的指针域
    		//  因此需要使用其指针来修改其指向
    		if (pCurrentNode != NULL) {
    			spLastNode = pCurrentNode;
    		}
    		//  遍历右子树
    		if (pCurrentNode->right != NULL) {
    			spLastNode = ConvertRecursion(pCurrentNode->right);
    		}
    		return spLastNode;
    	}
    };
    
    int main() {
    	//    4
    	//  3
    	//2
    	TreeNode tree1[3];
    	tree1[0].val = 4;
    	tree1[0].left = &tree1[1];
    	tree1[0].right = NULL;
    	tree1[1].val = 3;
    	tree1[1].left = &tree1[2];
    	tree1[1].right = NULL;
    	tree1[2].val = 2;
    	tree1[2].left = NULL;
    	tree1[2].right = NULL;
    
    	Solution solu1;
    	TreeNode *head1 = solu1.Convert(tree1);
    	while (head1 != NULL) {
    		cout << head1->val << " ";
    		head1 = head1->right;
    	}
    
    	//    4
    	//  3   5
    	//2
    	TreeNode tree2[4];
    	tree2[0].val = 4;
    	tree2[0].left = &tree2[1];
    	tree2[0].right = &tree2[2];
    	tree2[1].val = 3;
    	tree2[1].left = &tree2[3];
    	tree2[1].right = NULL;
    	tree2[2].val = 5;
    	tree2[2].left = NULL;
    	tree2[2].right = NULL;
    	tree2[3].val = 2;
    	tree2[3].left = NULL;
    	tree2[3].right = NULL;
    
    
    	Solution solu2;
    	TreeNode *head2 = solu2.Convert(tree2);
    	while (head2 != NULL) {
    		cout << head2->val << " ";
    		head2 = head2->right;
    	}
    	return 0;
    }


输出：

    
    lastNode is NULL
    -1, 2
    2, 3
    3, 4
    2 3 4 4, 2
    2, 3
    3, 4
    4, 5
    2 3 4 2 3 4 5


当然关于这个问题，其实我们也有其他的解决方法，比如将 lastnode 保存成一个成员对象。

但是我们通过参数保存的方法，这种方式更具有一般性，对于那些面向过程性的语言，也能更好的移植。**为什么通过参数保存的方法更具有一般性？能够更好的移植？**


### 非递归中序遍历实现


**这个没怎么看。要看下。**

我们当然可以用栈来模拟递归，来实现中序遍历的非递归版本。

将输出的过程更改为双向链表的链接，主要是将前驱节点 preNode 和当前访问节点 currNode 链接起来，这个时候需要注意的是第一个节点的处理（head的前驱节点为NULL）。

    
    #include <iostream>
    #include <stack>
    using namespace std;
    
    
    
    
    struct TreeNode {
    	int val;
    	struct TreeNode *left;
    	struct TreeNode *right;
    };
    
    class Solution {
    public:
    
    	TreeNode* Convert(TreeNode* pTreeRoot) {
    		if (pTreeRoot == NULL) {
    			cout << "The tree is NULL..." << endl;
    		}
    
    		stack<TreeNode *> nodeStack;
    		TreeNode *pCurrentNode = pTreeRoot;
    		TreeNode *pPreNode = NULL;
    		TreeNode *pHead = NULL;
    
    		//  开始遍历整个二叉树
    		while (pCurrentNode != NULL || nodeStack.empty() != true) {
    			// 不输出当前根节点，但是递归直至当前根节点node的最左端
    			while (pCurrentNode != NULL) {
    				nodeStack.push(pCurrentNode);
    				pCurrentNode = pCurrentNode->left;
    			}
    
    			//  此时栈顶的元素是当前最左元素
    			//  它应该被输出
    			if (nodeStack.empty() != true) {
    				//输出栈顶元素
    				pCurrentNode = nodeStack.top();
    				cout << pCurrentNode->val<<endl;
    				nodeStack.pop();
    
    				//  第一个节点
    				if (pPreNode == NULL) {
    					pHead = pCurrentNode;
    					pPreNode = pCurrentNode;
    				}
    				else {
    					pPreNode->right = pCurrentNode;
    					pCurrentNode->left = pPreNode;
    					pPreNode = pCurrentNode;
    				}
    				pCurrentNode = pCurrentNode->right;
    			}
    		}
    		return pHead;
    	}
    };
    
    int main() {
    	//    4
    	//  3
    	//2
    	TreeNode tree1[3];
    	tree1[0].val = 4;
    	tree1[0].left = &tree1[1];
    	tree1[0].right = NULL;
    	tree1[1].val = 3;
    	tree1[1].left = &tree1[2];
    	tree1[1].right = NULL;
    	tree1[2].val = 2;
    	tree1[2].left = NULL;
    	tree1[2].right = NULL;
    
    	Solution solu1;
    	TreeNode *head1 = solu1.Convert(tree1);
    	while (head1 != NULL) {
    		cout << head1->val << "  ";
    		head1 = head1->right;
    	}
    	cout << endl;
    
    	//    4
    	//  3   5
    	//2
    	TreeNode tree2[4];
    	tree2[0].val = 4;
    	tree2[0].left = &tree2[1];
    	tree2[0].right = &tree2[2];
    	tree2[1].val = 3;
    	tree2[1].left = &tree2[3];
    	tree2[1].right = NULL;
    	tree2[2].val = 5;
    	tree2[2].left = NULL;
    	tree2[2].right = NULL;
    	tree2[3].val = 2;
    	tree2[3].left = NULL;
    	tree2[3].right = NULL;
    
    
    	Solution solu2;
    	TreeNode *head2 = solu2.Convert(tree2);
    	while (head2 != NULL) {
    		cout << head2->val << "  ";
    		head2 = head2->right;
    	}
    	cout << endl;
    	return 0;
    }


输出：

    
    2
    3
    4
    2  3  4
    2
    3
    4
    5
    2  3  4  5




## 递归将左右子树变换为链表后，将他们与根链接成链表


这个算法的流程就是



 	
  1. 递归 root 左子树，并且与 root 与左子树链接起来

 	
    * 递归将 root 的左子树变换为双向链表，并且返回左子树根在链表中的位置节点

 	
    * 通过左子树的根的最后的最右子节点，即左子树链表的最后一个节点是 root 的前驱




 	
  2. 递归 root 右子树，并且与root与右子树链接起来

 	
    * 递归将 root 的右子树变换为双向链表，并且返回左子树根在链表中的位置节点

 	
    * 通过右子树的根的最后的最左子节点，即右子树链表的第一个节点是 root 的后继






    
    #include <iostream>
    #include <stack>
    using namespace std;
    
    
    
    
    struct TreeNode {
    	int val;
    	struct TreeNode *left;
    	struct TreeNode *right;
    };
    
    
    class Solution {
    public:
    
    	TreeNode* Convert(TreeNode* pRootOfTree) {
    		if (pRootOfTree == NULL) {
    			return NULL;
    		}
    		TreeNode *pLastNode = ConvertRecursion(pRootOfTree);
    
    		// 当递归结束后,*pLastNode指向了双向链表的尾结点
    		TreeNode *node = pLastNode;
    		while (pLastNode != NULL&& pLastNode->left != NULL) {
    			pLastNode = pLastNode->left;
    		}
    		return pLastNode;
    	}
    
    
    
    	TreeNode* ConvertRecursion(TreeNode *root) {
    		if (root == NULL) {
    			cout << "NULL" << endl;
    			return NULL;
    		}
    
    		//首先 递归左子树
    		TreeNode *lastNode = NULL;
    		if (root->left != NULL) {
    			// 递归将左子树转换为双向链表, 并且返回左子树的根节点
    			lastNode = ConvertRecursion(root->left);
    
    			//  递归左子树完成后
    			//  lastNode节点指向了左子树的根节点
    			//  但是root的前驱应该是原来左子树的最右子节点, 即转换成链表的最后一个节点,
    			while (lastNode != NULL && lastNode->right != NULL) {
    				lastNode = lastNode->right;
    			}
    			root->left = lastNode; //
    			lastNode->right = root; //无需判断lastNode是否为NULL, 因为我们的函数为root = NULL的是不进行递归的
    			cout << lastNode->val << ", " << root->val << endl;
    		}
    
    
    		// 接着 递归右子树
    		TreeNode *nextNode = NULL;
    		if (root->right != NULL) {
    			//  递归将左子树转换为双向链表, 并且返回左子树的根节点
    			nextNode = ConvertRecursion(root->right);
    
    			//  递归左子树完成后
    			//  lastNode节点应该是其左子树的最右节点
    			//  即转换成链表的最后一个节点
    			while (nextNode->left != NULL) {
    				nextNode = nextNode->left;
    			}
    			nextNode->left = root;
    			root->right = nextNode;
    			cout << root->val << ", " << nextNode->val << endl;
    		}
    
    		return root;
    	}
    };
    
    
    
    int main() {
    	//    4
    	//  3
    	//2
    	TreeNode tree1[3];
    	tree1[0].val = 4;
    	tree1[0].left = &tree1[1];
    	tree1[0].right = NULL;
    	tree1[1].val = 3;
    	tree1[1].left = &tree1[2];
    	tree1[1].right = NULL;
    	tree1[2].val = 2;
    	tree1[2].left = NULL;
    	tree1[2].right = NULL;
    
    	Solution solu1;
    	TreeNode *head1 = solu1.Convert(tree1);
    	while (head1 != NULL) {
    		cout << head1->val << "  ";
    		head1 = head1->right;
    	}
    	cout << endl;
    
    	//    4
    	//  3   5
    	//2
    	TreeNode tree2[4];
    	tree2[0].val = 4;
    	tree2[0].left = &tree2[1];
    	tree2[0].right = &tree2[2];
    	tree2[1].val = 3;
    	tree2[1].left = &tree2[3];
    	tree2[1].right = NULL;
    	tree2[2].val = 5;
    	tree2[2].left = NULL;
    	tree2[2].right = NULL;
    	tree2[3].val = 2;
    	tree2[3].left = NULL;
    	tree2[3].right = NULL;
    
    
    	Solution solu2;
    	TreeNode *head2 = solu2.Convert(tree2);
    	while (head2 != NULL) {
    		cout << head2->val << "  ";
    		head2 = head2->right;
    	}
    	cout << endl;
    	return 0;
    }


输出：

    
    2, 3
    3, 4
    2  3  4
    2, 3
    3, 4
    4, 5
    2  3  4  5








* * *





# COMMENT





 	
  * 

