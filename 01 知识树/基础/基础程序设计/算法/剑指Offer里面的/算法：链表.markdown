---
author: evo
comments: true
date: 2018-05-02 12:11:58+00:00
layout: post
link: http://106.15.37.116/2018/05/02/linked-list/
slug: linked-list
title: 算法：链表
wordpress_id: 4822
categories:
- 随想与反思
---

<!-- more -->

[mathjax]


# REFERENCE





 	
  1. aaa




# TODO





 	
  * aaa




# MOTIVE





 	
  * 对链表相关算法进行总结





* * *





# 链表


**对于链表头和尾还是有些不清楚。**




# 主要内容





 	
  * 链表相加

 	
  * 链表部分翻转

 	
  * 链表划分

 	
  * 链表去重




## 链表相加


给定两个链表，分别表示两个非负整数。它们的数字逆序存储在链表中，且每个结点只存储一个数字，计算两个数的和，并且返回和的链表头指针。

比如：输入：2→4→3，代表的是342，另一个输入是5→6→4，代表的是465，然后输出的是：7→0→8 即 807。

问题分析



 	
  * 输入：2->4->3、5->6->4，输出：7->0->8

 	
  * 因为两个数都是逆序存储，正好可以从头向后依次相加，完成“两个数的竖式计算”。


代码如下：**要自己做一遍**

    
    #include "stdafx.h"
    #include <stdio.h>
    #include <stdlib.h>
    
    typedef struct tagSNode{
    	int value;
    	tagSNode* pNext;
    
    	tagSNode(int v) :value(v), pNext(NULL){}
    }SNode;
    
    SNode* Add(SNode* pHead1, SNode* pHead2){
    	SNode* pSum = new SNode(0);
    	SNode* pTail = pSum;				//新结点插入到pTrail后面
    	SNode* p1 = pHead1->pNext;
    	SNode* p2 = pHead2->pNext;
    	SNode* pCur;
    	int carry = 0;//进位
    	int value;
    	while (p1 && p2)
    	{
    		value = p1->value + p2->value + carry;
    		carry = value / 10;
    		value %= 10;
    		pCur = new SNode(value);
    		pTail->pNext = pCur;
    		pTail = pCur;
    		p1 = p1->pNext;//处理下一位
    		p2 = p2->pNext;
    	}
    	//处理较长的链
    	SNode*p = p1 ? p1 : p2;
    	while (p)
    	{
    		value = p->value + carry;
    		carry = value / 10;
    		value %= 10;
    		pCur = new SNode(value);
    		pTail->pNext = pCur;
    		pTail = pCur;
    		p = p->pNext;
    	}
    	//处理可能存在的进位
    	if (carry != 0)
    	{
    		pTail->pNext = new SNode(carry);
    	}
    	return pSum;
    }
    
    void Print(SNode* pHead){
    	SNode*p = pHead->pNext;
    
    	while (true)
    	{
    		printf("%d ", p->value);
    		if (!p->pNext)
    		{
    			printf("\n");
    			return;
    		}
    		p = p->pNext;
    	}
    }
    void Destroy(SNode* pHead)
    {
    	//这样destroy对不对？要确认下。
    	SNode*p = pHead;
    	do
    	{
    		SNode *pCur = p;
    		p = p->pNext;
    		delete(pCur);
    	} while (p->pNext);
    
    }
    //注意，他这里面是在每个链表前面加了一个值为0的链表，但是不会使用里面的值，真正的值是从 pNext 开始的。
    int _tmain(int argc, _TCHAR* argv[])
    {
    	SNode *pHead1 = new SNode(0);
    	int i;
    	for (i = 0; i < 6; i++)
    	{
    		SNode* p = new SNode(rand() % 10);
    		p->pNext = pHead1->pNext;
    		pHead1->pNext = p;
    	}
    	SNode*pHead2 = new SNode(0);
    	for (i = 0; i < 9; i++)
    	{
    		SNode*p = new SNode(rand() % 10);
    		p->pNext = pHead2->pNext;
    		pHead2->pNext = p;
    	}
    	Print(pHead1);
    	Print(pHead2);
    	SNode*pSum = Add(pHead1, pHead2);
    	Print(pSum);
    	Destroy(pHead1);
    	Destroy(pHead2);
    	Destroy(pSum);
    
    	return 0;
    }




输出如下：




    
    4 9 0 4 7 1
    1 7 1 5 5 4 2 8 8
    5 6 2 9 2 6 2 8 8


OK，进一步思考：



 	
  * 因为两个数字求和的范围是[0,18]，进位最大是1，从而，第 i 位相加不会影响到第 i+2 位的计算。是的。因此，如果是实现乘法，就没办法这样了。

 	
  * 在发现一个链表为空后，直接结束for循环。最后只需要进位和较长链表的当前结点相加，较长链表的其他结点直接拷贝到最终结果即可。这个其实没有提高时间复杂度，只是trick而已。

 	
  * 可不可以利用上面的结构实现大整数运算呢？比如 201314+(100!)= ？ 应该是可以的，**不知道真正的大整数运算的类都是怎么实现的？**


**上面的代码中，老师写链表的时候是带表头的，说在实践中这样方便，确认下。**


## 链表的部分翻转


给定一个链表，翻转该链表从 m 到 n 的位置。要求直接翻转而非申请新空间。

比如：给定1→2→3→4→5，m=2，n=4，返回1→4→3→2→5。

假定给出的参数满足：1 ≤m ≤ n ≤ 链表长度。

分析：



 	
  * 我们先空转m-1次，找到第m-1个结点，即开始翻转的第一个结点的前驱，记做head；

 	
  * 然后以head为起始结点遍历n-m次，将第i次时，将找到的结点插入到 head 的 next 中即可。即头插法。


代码如下：**要自己写一遍 理解的还是不够。**

    
    #include "stdafx.h"
    #include <stdio.h>
    #include <stdlib.h>
    
    typedef struct tagSNode{
    	int value;
    	tagSNode* pNext;
    
    	tagSNode(int v) :value(v), pNext(NULL){}
    }SNode;
    
    void Reverse(SNode* pHead, int from, int to)
    {
    	SNode* pCur = pHead->pNext;
    	int i;
    	for (i = 0; i < from - 1; i++)
    	{
    		pHead = pCur;
    		pCur = pCur->pNext;
    	}
    	//到这里，pHead就指向了第3个，pCur指向了第4个。
    	SNode* pPre = pCur;
    	pCur = pCur->pNext;
    	to--;
    	SNode* pNext;
    	//到这里，pPre就指向了第4个，pCur指向了第5个。
    	//这个地方的实质就是，依次，把4~8号的插入到前面来，每个循环，就把后面一个插入到第4的位置，怪不得叫前插法。
    	for (; i < to; i++)
    	{
    		pNext = pCur->pNext;		//将pNext指向pCur后面的一个
    		pCur->pNext = pHead->pNext;		//将pCur后面的一个设定为紧跟着pHead的一个
    		pHead->pNext = pCur;	//将pCur放到pHead后面
    		pPre->pNext = pNext;		//将pNext放到pPre后面
    		pCur = pNext;					//将pCur更新为pNext
    
    	}
    }
    
    void Print(SNode* pHead){
    	SNode*p = pHead->pNext;
    
    	while (true)
    	{
    		printf("%d ", p->value);
    		if (!p->pNext)
    		{
    			printf("\n");
    			return;
    		}
    		p = p->pNext;
    	}
    }
    void Destroy(SNode* pHead)
    {
    	//可以这么写：
    	SNode* next;
    	while (pHead)
    	{
    		next = pHead->pNext;
    		delete pHead;
    		pHead = next;
    	}
    }
    //注意，他这里面是在每个链表前面加了一个值为0的链表，但是不会使用里面的值，真正的值是从 pNext 开始的。
    int _tmain(int argc, _TCHAR* argv[])
    {
    	SNode *pHead = new SNode(0);
    	int i;
    	for (i = 0; i < 10; i++)
    	{
    		SNode* p = new SNode(rand() % 10);
    		p->pNext = pHead->pNext;
    		pHead->pNext = p;
    	}
    	Print(pHead);
    	Reverse(pHead, 4, 8);
    	Print(pHead);
    	Destroy(pHead);
    	
    	return 0;
    }




输出如下：




    
    4 2 8 8 4 9 0 4 7 1
    4 2 8 4 0 9 4 8 7 1


**理解的不够**


## 链表划分


给定一个链表和一个值x，将链表划分成两部分，使得划分后小于x的结点在前，大于等于x的结点在后。在这两部分中要保持原链表中的出现顺序。

如：给定链表 1→4→3→2→5→2 和 x = 3，返回1→2→2→4→3→5。

问题分析

可以分别申请两个指针 p1 和 p2，小于x的添加到 p1 中，大于等于x的添加到 p2 中，最后，将p2链接到p1的末端即可。**是的。**这样的话时间复杂度是O(N)，空间复杂度为O(1)。

这个问题其实不难，但是带来的一个结论却很重要：该问题其实说明，快速排序对于单链表存储结构仍然适用。这就是讲这个题目的原因。

注：**不是所有排序都方便使用链表存储**，如堆排序，将不断的查找数组的n/2和n的位置，用链表做存储结构会不太方便。**堆排序是什么样子的？**

    
    #include "stdafx.h"
    #include <stdio.h>
    #include <stdlib.h>
    
    typedef struct tagSNode{
    	int value;
    	tagSNode* pNext;
    
    	tagSNode(int v) :value(v), pNext(NULL){}
    }SNode;
    void Partition(SNode *pHead, int pivotKey){
    	//两个链表的头指针
    	SNode*pLeftHead = new SNode(0);
    	SNode*pRightHead = new SNode(0);
    
    	//两个链表的当前最后一个元素
    	SNode*left = pLeftHead;
    	SNode*right = pRightHead;
    	SNode*p = pHead->pNext;
    	while (p)//遍历原链表
    	{
    		if (p->value < pivotKey)
    		{
    			left->pNext = p;
    			left = p;
    		}
    		else
    		{
    			right->pNext = p;
    			right = p;
    		}
    		p = p->pNext;
    	}
    	//将right链接到left 尾部
    	left->pNext = pRightHead->pNext;
    	right->pNext = NULL;
    	//将整理好的链表值复制给当前链表头部
    	pHead->pNext = pLeftHead->pNext;
    	delete pLeftHead;
    	delete pRightHead;
    }
    
    void Print(SNode* pHead){
    	SNode*p = pHead->pNext;
    
    	while (true)
    	{
    		printf("%d ", p->value);
    		if (!p->pNext)
    		{
    			printf("\n");
    			return;
    		}
    		p = p->pNext;
    	}
    }
    void Destroy(SNode* pHead)
    {
    	//可以这么写：
    	SNode* next;
    	while (pHead)
    	{
    		next = pHead->pNext;
    		delete pHead;
    		pHead = next;
    	}
    }
    //注意，他这里面是在每个链表前面加了一个值为0的链表，但是不会使用里面的值，真正的值是从 pNext 开始的。
    int _tmain(int argc, _TCHAR* argv[])
    {
    	SNode *pHead = new SNode(0);
    	int i;
    	for (i = 0; i < 10; i++)
    	{
    		SNode* p = new SNode(rand() % 100);
    		p->pNext = pHead->pNext;
    		pHead->pNext = p;
    	}
    	Print(pHead);
    	Partition(pHead, 50);
    	Print(pHead);
    	Destroy(pHead);
    
    	return 0;
    }


输出：

    
    64 62 58 78 24 69 0 34 67 41
    24 0 34 41 64 62 58 78 69 67




## 排序链表中去重


给定排序的链表，删除重复元素，只保留重复元素第一次出现的结点。

如：给定：2→3→3→5→7→8→8→8→9→9→10    返回：2→3→5→7→8→9→10

问题分析：

若 p->next的值和p的值相等，则将 p->next->next 赋值给 p，删除 p->next；重复上述过程，直至链表尾端。**这个只能删除邻接的重复值把？**

代码如下：

    
    #include "stdafx.h"
    #include <stdio.h>
    #include <stdlib.h>
    
    typedef struct tagSNode{
    	int value;
    	tagSNode* pNext;
    
    	tagSNode(int v) :value(v), pNext(NULL){}
    }SNode;
    void DeleteDuplicationNode(SNode* pHead){
    	SNode*pPre = pHead->pNext;
    	SNode* pCur;
    	while (pPre)
    	{
    		pCur = pPre->pNext;
    		if (pCur && (pCur->value == pPre->value))
    		{
    			pPre->pNext = pCur->pNext;
    			delete pCur;
    		}
    		else
    		{
    			pPre = pCur;
    		}
    	}
    }
    
    void Print(SNode* pHead){
    	SNode*p = pHead->pNext;
    
    	while (true)
    	{
    		printf("%d ", p->value);
    		if (!p->pNext)
    		{
    			printf("\n");
    			return;
    		}
    		p = p->pNext;
    	}
    }
    void Destroy(SNode* pHead)
    {
    	//可以这么写：
    	SNode* next;
    	while (pHead)
    	{
    		next = pHead->pNext;
    		delete pHead;
    		pHead = next;
    	}
    }
    //注意，他这里面是在每个链表前面加了一个值为0的链表，但是不会使用里面的值，真正的值是从 pNext 开始的。
    int _tmain(int argc, _TCHAR* argv[])
    {
    	SNode *pHead = new SNode(0);
    	int data[] = { 2, 3, 3, 5, 7, 8, 8, 8, 9, 9, 30 };
    	int size = sizeof(data) / sizeof(int);
    
    	for (int i = size - 1; i >= 0; i--)
    	{
    		SNode* p = new SNode(data[i]);
    		p->pNext = pHead->pNext;
    		pHead->pNext = p;
    	}
    	Print(pHead);
    	DeleteDuplicationNode(pHead);
    	Print(pHead);
    	Destroy(pHead);
    
    	return 0;
    }


输出：

    
    2 3 3 5 7 8 8 8 9 9 30
    2 3 5 7 8 9 30


其中DeleteDuplicateNode还有一种写法：保留新的重复数，旧的重复数扔掉。

    
    void DeleteDuplicationNode(SNode* pHead){
    	SNode* pPre = pHead;
    	SNode* pCur = pPre->pNext;
    	SNode* pNext;
    	while (pCur)
    	{
    		pNext = pCur->pNext;
    		//保留新的重复数，旧的重复数扔掉
    		while (pNext&&(pCur->value==pNext->value))
    		{
    			pPre->pNext = pNext;
    			delete pCur;
    			pCur = pNext;
    			pNext = pCur->pNext;
    		}
    		pPre = pCur;
    		pCur = pNext;
    	}
    }


那么如果上面的题目变成：若发现重复元素，则重复元素全部删除，代码应该怎么实现呢？

比如：给定：2→3→3→5→7→8→8→8→9→9→10  返回：2→5→7→10

此时代码如下：

    
    void DeleteDuplicationNode(SNode* pHead){
    	SNode* pPre = pHead;
    	SNode* pCur = pPre->pNext;
    	SNode* pNext;
    	bool bDup;
    	while (pCur)
    	{
    		pNext = pCur->pNext;
    		bDup = false;
    		//保留新的重复数，旧的重复数扔掉
    		while (pNext && (pCur->value == pNext->value))
    		{
    			pPre->pNext = pNext;
    			delete pCur;
    			pCur = pNext;
    			pNext = pCur->pNext;
    			bDup = true;
    		}
    		if (bDup)   //此时的pCur与原来的数据是重复的，因此删掉
    		{
    			pPre->pNext = pNext;
    			delete pCur;
    		}
    		else       //如果没有发现pCur重复，将pPre向后移动。
    		{
    			pPre = pCur;
    		}
    		pCur = pNext;
    	}
    }


此时输出如下：

    
    2 3 3 5 7 8 8 8 9 9 30
    2 5 7 30




## 小结


可以发现，纯链表的题目，往往不难，但需要需要扎实的Coding基本功，在实现过程中，要特别小心next的指向，此外，删除结点时，一定要确保该结点不再需要。

小心分析引用类型的指针。**嗯，要对引用类型的指针的使用总结一下。**























* * *





# COMMENT



