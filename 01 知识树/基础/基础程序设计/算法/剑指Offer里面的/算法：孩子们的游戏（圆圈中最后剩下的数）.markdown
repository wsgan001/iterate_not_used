

# REF
- [CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO






  * aaa





* * *





# INTRODUCTION






  * aaa





# 题目


**题目描述**

有个游戏是这样的:

首先，让小朋友们围成一个大圈。然后，随机指定一个数 m，让编号为 0 的小朋友开始报数。

每次喊到 m 的那个小朋友要出列唱首歌，然后可以在礼品箱中任意的挑选礼物，并且不再回到圈中，从他的下一个小朋友开始，继续 0...m-1 报数 .... 这样下去....直到剩下最后一个小朋友。

求出这位小朋友的编号。

**样例输入**




  * 1 10


  * 8 5


  * 6 6


**样例输出**




  * 1


  * 3


  * 4




# 题目解答




## 模拟环形链表


既然题目中有一个数字圆圈，我们很容易想到用环形链表来模拟这个圆圈。因此我们可以创建一个有 n 个结点的环形链表，然后每次在这个链表中删除第 m 个结点。

可以使用 STL 中的 list 或者 vector 来模拟一个环形链表。t 本身不是环形结构，所以每次当迭代器扫描到链表的末尾时，我们要将迭代器移到链表头。

代码如下:


    #include <iostream>
    #include <vector>
    #include <iterator>

    using namespace std;


    class Solution {
    public:
    	int LastRemaining_Solution(unsigned int n, unsigned int m) {
    		if (n < 1 || m < 1) {
    			return -1;
    		}

    		//加入 vector 中
    		vector<int> numbers;
    		for (int i = 0; i < n; i++) {
    			numbers.push_back(i);
    		}

    		unsigned int cntN = 0;//这个是用来在超过 numbers.size() 的时候 从头重新数的
    		unsigned int cntM = -1;//用来对应 m 的数数
    		while (numbers.size() > 1) {
    			cout << "count = " << 1 << ", num[" << cntN << "] = " << numbers[cntN] << endl;
    			//当cntM<m的时候，一直往后数
    			for (int cntM = 1; cntM < m; cntM++) {
    				++cntN;
    				cntN %= numbers.size();
    				cout << "count = " << cntN + 1 << ", num[" << cntN << "] = " << numbers[cntN] << endl;
    			}
    			//cntM=m 这时候把对应的数从vector中移除
    			cout << numbers[cntN] << " leave the list" << endl;
    			numbers.erase(numbers.begin() + cntN);
    			cout << "current vector : ";
    			copy(numbers.begin(), numbers.end(), ostream_iterator< int >(cout, " "));//输出现在列表的内容
    			cout << endl;
    		}
    		//  循环结束的时候, cntN = 1
    		return numbers[0];//返回这个时候的孩子的编号
    	}
    };

    int main() {
    	Solution solu;
    	cout << solu.LastRemaining_Solution(5, 2) << endl << endl;
    	cout << solu.LastRemaining_Solution(8, 5) << endl << endl;;
    	cout << solu.LastRemaining_Solution(6, 6) << endl << endl;;
    	return 0;
    }


上面的代码有问题好像，copy(numbers.begin(), numbers.end(), ostream_iterator< int >(cout, " ")); 这句会报错。再看下。而且，为什么我删除这一句的时候，360 会报木马呢？一直想知道360 到底什么时候会报木马。

再试下。




# 递推公式-获取最后的胜利者的序号


无论是用链表实现还是用数组实现都有一个共同点：要模拟整个游戏过程，不仅程序写起来比较烦，而且时间复杂度高达 \(O(nm)\) ，当 n，m 非常大（例如上百万，上千万）的时候，几乎是没有办法在短时间内出结果的。我们注意到原问题仅仅是要求出最后的胜利者的序号，而不是要读者模拟整个过程。因此如果要追求效率，就要打破常规，实施一点数学策略。

为了讨论方便，先把问题稍微改变一下，并不影响原意： 我们知道第一个人（编号一定是（m-1）) 出列之后，剩下的 n-1 个人组成了一个新的约瑟夫环（我们以编号为 k=m mod n 的人开始）：**什么是 m mod n ？**

k k+1 k+2 ... n-2,n-1,0,1,2,... k-2
并且从k开始报0。 我们把他们的编号做一下转换：




  * k --> 0


  * k+1 --> 1


  * k+2 --> 2


  * ...


  * ...


  * k-2 --> n-2


变换后就完完全全成为了（n-1）个人报数的子问题，因此，假如我们知道这个时候的 （n-1）个人中 的最后的胜利者是 x ，那么根据上面这种对应关系，把这个 x 变回去就是 n 个人时候的解了。

变回去的公式如下：x'=(x+k) mod n

OK，那么我们就可以以此类推：如何知道（n-1）个人报数的问题的解的？只要知道（n-2）个人的解就行了。（n-2）个人的解呢？当然是先求（n-3）的情况 ...

OK，思路出来了，下面写递推公式：

令 f 表示 i 个人玩游戏报 m 退出最后胜利者的编号，那么：


  * f[1] = 0


  * f[i] = (f[i - 1] + m) mod i


因此，我们可以从 1 到 n 顺序算出 f 的数值。

注意：我们的编号是从 0 开始的，如果从 1 开始可以返回 f[n] + 1。

代码如下：


    #include <iostream>
    #include <vector>
    #include <iterator>

    using namespace std;


    class Solution {
    public:
    	int LastRemaining_Solution(unsigned int n, unsigned int m) {
    		if (n < 1 || m < 1) {
    			return -1;
    		}
    		int last = 0;//从0开始的编号
    		//从最后一次开始计算
    		for (int step = 2; step <= n; step++) {
    			last = (last + m) % step;
    		}
    		return last;
    	}
    };

    int main() {
    	Solution solu;
    	cout << solu.LastRemaining_Solution(5, 2) << endl << endl;
    	cout << solu.LastRemaining_Solution(8, 5) << endl << endl;;
    	cout << solu.LastRemaining_Solution(6, 6) << endl << endl;;
    	return 0;
    }


输出：


    2

    2

    3


递归形式如下：


    #include <iostream>
    #include <vector>
    #include <iterator>

    using namespace std;


    class Solution {
    public:
    	int LastRemaining_Solution(unsigned int n, unsigned int m) {
    		if (n < 1 || m < 1) {
    			return -1;
    		}
    		else if (n == 1) {
    			return 0;
    		}
    		else {
    			// F[n] = (F[n - 1] + m) % n
    			return (LastRemaining_Solution(n - 1, m) + m) % n;
    		}
    	}
    };

    int main() {
    	Solution solu;
    	cout << solu.LastRemaining_Solution(5, 2) << endl << endl;
    	cout << solu.LastRemaining_Solution(8, 5) << endl << endl;;
    	cout << solu.LastRemaining_Solution(6, 6) << endl << endl;;
    	return 0;
    }


输出：


    2

    2

    3












* * *





# COMMENT
