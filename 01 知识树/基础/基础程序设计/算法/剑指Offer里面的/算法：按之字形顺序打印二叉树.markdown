---
author: evo
comments: true
date: 2018-05-30 00:42:12+00:00
layout: post
link: http://106.15.37.116/2018/05/30/%e7%ae%97%e6%b3%95%ef%bc%9a%e6%8c%89%e4%b9%8b%e5%ad%97%e5%bd%a2%e9%a1%ba%e5%ba%8f%e6%89%93%e5%8d%b0%e4%ba%8c%e5%8f%89%e6%a0%91/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e6%8c%89%e4%b9%8b%e5%ad%97%e5%bd%a2%e9%a1%ba%e5%ba%8f%e6%89%93%e5%8d%b0%e4%ba%8c%e5%8f%89%e6%a0%91'
title: 算法：按之字形顺序打印二叉树
wordpress_id: 7008
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，所有版权属于原作者，原文已列在 ORIGINAL 中。为了方便个人学习做了整合、修改，仅供个人学习使用。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## **题目描述**


请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。




# 题目解答




## 层次遍历后结果之按字输出


其实我们可以借鉴层次遍历时候的思路，参见 [把二叉树打印成多行](http://106.15.37.116/2018/05/30/%e7%ae%97%e6%b3%95%ef%bc%9a%e6%8a%8a%e4%ba%8c%e5%8f%89%e6%a0%91%e6%89%93%e5%8d%b0%e6%88%90%e5%a4%9a%e8%a1%8c/) ，我们把层次遍历的结果保存在vector< vector > 中每一层保存在一个 vector 中，那么我们输出的时候就可以进行调整，按照之字形输出即可。

    
    #include <iostream>
    #include <algorithm>
    #include <vector>
    
    using namespace std;
    
    struct TreeNode {
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
        TreeNode(int x = 0)
            :val(x), left(NULL), right(NULL) {
        }
    };
    
    class Solution {
    private:
        vector< vector<int> > ans;
    public:
        vector< vector<int> > Print(TreeNode* pRoot) {
            LevelOrder(pRoot, 0);
            for (int i = 0; i < ans.size(); i++) {
                if (i & 1) {        //利害，用这种来判断
                    reverse(ans[i].begin(), ans[i].end());//翻转 vector
                }
            }
            return ans;
        }
        void LevelOrder(TreeNode *pRoot, int p) {
            if (pRoot == NULL) {
                return;
            }
            if (ans.size() == p) {
                ans.push_back(vector<int>());
            }
            ans[p].push_back(pRoot->val);//存放到对应的vector里面
            LevelOrder(pRoot->left, p + 1);
            LevelOrder(pRoot->right, p + 1);
        }
    };
    
    int main() {
        TreeNode tree[7];
        tree[0].val = 8;
        tree[0].left = &tree[1];
        tree[0].right = &tree[2];
        tree[1].val = 6;
        tree[1].left = &tree[3];
        tree[1].right = &tree[4];
        tree[2].val = 10;
        tree[2].left = &tree[5];
        tree[2].right = &tree[6];
        tree[3].val = 5;
        tree[3].left = NULL;
        tree[3].right = NULL;
        tree[4].val = 7;
        tree[4].left = NULL;
        tree[4].right = NULL;
        tree[5].val = 9;
        tree[5].left = NULL;
        tree[5].right = NULL;
        tree[6].val = 11;
        tree[6].left = NULL;
        tree[6].right = NULL;
    
        Solution solu;
        vector< vector<int> > res = solu.Print(tree);
        for (int i = 0; i < res.size(); i++) {
            for (int j = 0; j < res[i].size(); j++) {
                cout << res[i][j];
            }
            cout << endl;
        }
        return 0;
    }


输出：

    
    8
    106
    57911




## 层次遍历用双端队列存储


**没看懂，再看一下。**

上面那种方法是在层次遍历完成后的输出过程进行转换，这种处理对于海量数据就很鸡肋了。

其实我们可以在层次遍历的过程中就进行转换，在层次遍历的过程中, 将元素的输出顺序即插入顺序与其层数相关联。

我们之前提到过，层次遍历有多种方法, 我们可以在对二叉树进行层次遍历的时候，设置一个标识层数，奇数层时从前向后遍历，偶数层时从后向前遍历。用双端队列 deque 存储最为方便。

关于层次遍历的方法我们这里不再详述，我们这里采用的方式是在每层的结束插入一个特殊标识(NULL)，来表示一层的结束

当然可以有其他方法，但是基本思路相同，而且层次遍历只是本题的一部分，关键是如何实现之字访问。

    
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <deque>
    
    using namespace std;
    
    struct TreeNode {
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
        TreeNode(int x = 0)
            :val(x), left(NULL), right(NULL) {
        }
    };
    
    class Solution {
    public:
        vector<vector<int> > Print(TreeNode* pRoot) {
            vector< vector<int> > ret;
            if (pRoot == NULL) {
                return ret;
            }
            vector<int> curr;//当前的一行
            deque<TreeNode *> deq;
            deq.push_back(NULL);//层分隔符
            deq.push_back(pRoot);
            bool leftToRight = true;
            while (deq.size() != 1) {
                TreeNode* node = deq.front();
                deq.pop_front();
    
                //  到达每层分隔符
                if (node == NULL) {
                    if (leftToRight == true) {
                        //  从前向后遍历
                        deque<TreeNode *>::iterator iter;
                        for (iter = deq.begin(); iter != deq.end(); iter++) {
                            curr.push_back((*iter)->val);
                        }
                    }
                    else {
                        //  从后往前遍历
                        deque<TreeNode *>::reverse_iterator riter;
                        for (riter = deq.rbegin(); riter < deq.rend(); riter++) {
                            curr.push_back((*riter)->val);
                        }
                    }
                    leftToRight = !leftToRight;
    
                    ret.push_back(curr);
                    curr.clear();
                    deq.push_back(NULL);//添加层分隔符
                    continue;//一定要continue
                }
                if (node->left != NULL) {
                    deq.push_back(node->left);
                }
                if (node->right != NULL) {
                    deq.push_back(node->right);
                }
            }
            return ret;
        }
    };
    
    int main() {
        TreeNode tree[7];
        tree[0].val = 8;
        tree[0].left = &tree[1];
        tree[0].right = &tree[2];
        tree[1].val = 6;
        tree[1].left = &tree[3];
        tree[1].right = &tree[4];
        tree[2].val = 10;
        tree[2].left = &tree[5];
        tree[2].right = &tree[6];
        tree[3].val = 5;
        tree[3].left = NULL;
        tree[3].right = NULL;
        tree[4].val = 7;
        tree[4].left = NULL;
        tree[4].right = NULL;
        tree[5].val = 9;
        tree[5].left = NULL;
        tree[5].right = NULL;
        tree[6].val = 11;
        tree[6].left = NULL;
        tree[6].right = NULL;
    
        Solution solu;
        vector< vector<int> > res = solu.Print(tree);
        for (int i = 0; i < res.size(); i++) {
            for (int j = 0; j < res[i].size(); j++) {
                cout << res[i][j];
            }
            cout << endl;
        }
        return 0;
    }


输出：

    
    8
    106
    57911





## 层次遍历双栈模拟顺序逆序


也可以用两个栈来保存节点的每一层,



 	
  * 一个实现先进先出，即入栈顺序为右子节点、左子节点

 	
  * 一个实现后进先出，即入栈顺序为左子节点、右子节点



    
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <stack>
    
    using namespace std;
    
    struct TreeNode {
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
        TreeNode(int x = 0)
            :val(x), left(NULL), right(NULL) {
        }
    };
    
    class Solution {
    
    #define LEFT_TO_RIGHT 1 //  先左后右访问, 意味着先右后左入栈
    #define RIGHT_TO_LEFT 0 //  先右后左访问, 意味着先左后右入栈
    
    public:
    
        vector< vector<int> > Print(TreeNode* pRoot) {
            vector< vector<int> > res;
            if (pRoot == NULL) {
                return res;
            }
            vector<int> curr;
            stack<TreeNode *> levels[2];
            int current = LEFT_TO_RIGHT;
            int next = RIGHT_TO_LEFT;
            levels[current].push(pRoot);
    
            while (levels[LEFT_TO_RIGHT].empty() != true
                || levels[RIGHT_TO_LEFT].empty() != true) {
                TreeNode *pNode = levels[current].top();
                levels[current].pop();
    
                curr.push_back(pNode->val);
    
                /*  当前层次current是先左后右访问
                *  则下一层次应该先右后左访问
                *  即next从左往右入栈
                */
                if (current == LEFT_TO_RIGHT) {
                    if (pNode->left != NULL) {
                        levels[next].push(pNode->left);
                    }
                    if (pNode->right != NULL) {
                        levels[next].push(pNode->right);
                    }
                }
                else {
                    //  先右后左入栈
                    if (pNode->right != NULL) {
                        levels[next].push(pNode->right);
                    }
                    if (pNode->left != NULL) {
                        levels[next].push(pNode->left);
                    }
                }
                if (levels[current].empty() == true) {
                    res.push_back(curr);
                    curr.clear();
                    current = 1 - current;
                    next = 1 - next;
                }
            }
            return res;
        }
    };
    
    int main() {
        TreeNode tree[7];
        tree[0].val = 8;
        tree[0].left = &tree[1];
        tree[0].right = &tree[2];
        tree[1].val = 6;
        tree[1].left = &tree[3];
        tree[1].right = &tree[4];
        tree[2].val = 10;
        tree[2].left = &tree[5];
        tree[2].right = &tree[6];
        tree[3].val = 5;
        tree[3].left = NULL;
        tree[3].right = NULL;
        tree[4].val = 7;
        tree[4].left = NULL;
        tree[4].right = NULL;
        tree[5].val = 9;
        tree[5].left = NULL;
        tree[5].right = NULL;
        tree[6].val = 11;
        tree[6].left = NULL;
        tree[6].right = NULL;
    
        Solution solu;
        vector< vector<int> > res = solu.Print(tree);
        for (int i = 0; i < res.size(); i++) {
            for (int j = 0; j < res[i].size(); j++) {
                cout << res[i][j];
            }
            cout << endl;
        }
        return 0;
    }


输出：

    
    8
    106
    57911






* * *





# COMMENT



