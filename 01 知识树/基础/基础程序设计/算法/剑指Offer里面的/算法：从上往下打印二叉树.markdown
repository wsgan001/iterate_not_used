---
author: evo
comments: true
date: 2018-05-18 07:28:14+00:00
layout: post
link: http://106.15.37.116/2018/05/18/%e7%ae%97%e6%b3%95%ef%bc%9a%e4%bb%8e%e4%b8%8a%e5%be%80%e4%b8%8b%e6%89%93%e5%8d%b0%e4%ba%8c%e5%8f%89%e6%a0%91/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e4%bb%8e%e4%b8%8a%e5%be%80%e4%b8%8b%e6%89%93%e5%8d%b0%e4%ba%8c%e5%8f%89%e6%a0%91'
title: 算法：从上往下打印二叉树
wordpress_id: 5985
categories:
- 随想与反思
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * **没有看，要看下**

 	
  * **是不是要和 [算法：二叉树的遍历](http://106.15.37.116/2018/05/18/%e7%ae%97%e6%b3%95%ef%bc%9a%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%81%8d%e5%8e%86/) 合并？**





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## **题目描述**


从上往下打印出二叉树的每个节点，同层节点从左至右打印。


## 





# 题目解答


其实就是层次遍历，

可以看一下这个：[算法：二叉树的遍历](http://106.15.37.116/2018/05/18/%e7%ae%97%e6%b3%95%ef%bc%9a%e4%ba%8c%e5%8f%89%e6%a0%91%e7%9a%84%e9%81%8d%e5%8e%86/)

其中调试的时候使用了： [算法：重建二叉树](http://106.15.37.116/2018/05/15/%e7%ae%97%e6%b3%95%ef%bc%9a%e9%87%8d%e5%bb%ba%e4%ba%8c%e5%8f%89%e6%a0%91/) 来辅助我们通过前序和中序遍历的序列来生成二叉树

直接贴代码，只需要直接将我们层次遍历输出过程，变成将输入压入 vector 中即可：

    
    #include <iostream>
    #include <vector>
    #include <deque>
    #include <queue>
    
    using namespace std;
    
    
    
    struct TreeNode {
    	int val;
    	struct TreeNode *left;
    	struct TreeNode *right;
    
    	TreeNode(int x)
    		:val(x), left(NULL), right(NULL) {
    	}
    };
    
    
    
    
    class Solution {
    private:
    	vector<int> res;
    public:
    
    	//共有5种方法
    	vector<int> PrintFromTopToBottom(TreeNode *root) {
    		LevelOrder(root);///  方法1  -=>  循环调用递归打印每一层
    // 		LevelOrderDev(root);///  方法2  -=>  使用两个双端队列
    // 		LevelOrderUsePoint(root);///  方法3  -=>  使用双指针标识当前指针和结束
    // 		LevelOrderUseSize(root);///  方法4  -=>  使用aprent和childzsizesize标识前一层和当前层的节点个数
    // 		LevelOrderUseEnd(root);///  方法4  -=>  在队列中插入结束标识来标识当前层结束
    		return this->res;
    	}
    
    	/// 打印某一层的节点，递归实现
    	int PrintLevel(TreeNode *root, int level) {
    		if (root == NULL || level < 0) {
    			return 0;
    		}
    		else if (level == 0) {
    			cout << root->val;
    			res.push_back(root->val);        /// add for result in vector
    
    			return 1;
    		}
    		else {
    			return PrintLevel(root->left, level - 1) + PrintLevel(root->right, level - 1);
    		}
    	}
    	///  循环每层输出其节点，调用递归函数
    	void LevelOrder(TreeNode *root) {
    		res.clear();           /// add for result in vector
    		if (root == NULL) {
    			return;
    		}
    		for (int level = 0;; level++) {
    			if (PrintLevel(root, level) == 0) {
    				break;
    			}
    			cout << endl;
    		}
    	}
    
    
    
    
    	//////////////////////////
    	///  使用两个双端队列
    	//////////////////////////
    	void LevelOrderDev(TreeNode *root) {
    		res.clear();           /// add for result in vector
    
    		/// deque双端队列，
    		/// 支持迭代器，有push_back()方法，
    		/// 跟vector差不多，比vector多了个pop_front,push_front方法
    
    		deque<TreeNode *> qFirst, qSecond;
    		qFirst.push_back(root);
    
    		while (qFirst.empty() != true) {
    			while (qFirst.empty() != true) {
    				TreeNode *temp = qFirst.front();
    				qFirst.pop_front();
    
    				cout << temp->val;
    				res.push_back(temp->val);        /// add for result in vector
    
    
    				if (temp->left != NULL) {
    					qSecond.push_back(temp->left);
    				}
    				if (temp->right != NULL) {
    					qSecond.push_back(temp->right);
    				}
    			}
    			cout << endl;
    			qFirst.swap(qSecond);
    
    		}
    	}
    
    
    
    
    
    	//////////////////////////
    	///  使用双指针标识当前指针和结束
    	//////////////////////////
    	void LevelOrderUsePoint(TreeNode *root) {
    		res.clear();           /// add for result in vector
    
    		vector<TreeNode*> vec;
    		vec.push_back(root);
    
    		int cur = 0;
    		int end = 1;
    
    		while (cur < vec.size()) {
    			end = vec.size();       ///  新的一行访问开始，重新定位end于当前行最后一个节点的下一个位置
    
    			while (cur < end) {
    				cout << vec[cur]->val;  ///  访问节点
    				res.push_back(vec[cur]->val);        /// add for result in vector
    
    				if (vec[cur]->left != NULL) ///  压入左节点
    				{
    					vec.push_back(vec[cur]->left);
    
    				}
    				if (vec[cur]->right != NULL)    ///  压入右节点
    				{
    					vec.push_back(vec[cur]->right);
    				}
    				cur++;
    			}
    			cout << endl;
    		}
    	}
    
    
    
    
    	//////////////////////////
    	///  使用aprent和childzsizesize标识前一层和当前层的节点个数
    	//////////////////////////
    	void LevelOrderUseSize(TreeNode *root) {
    		res.clear();           /// add for result in vector
    
    		int parentSize = 1, childSize = 0;
    		TreeNode *temp = NULL;
    
    		queue<TreeNode *> q;
    		q.push(root);
    		while (q.empty() != true) {
    			temp = q.front();
    			cout << temp->val;
    			res.push_back(temp->val);        /// add for result in vector
    
    			q.pop();
    
    			if (temp->left != NULL) {
    				q.push(temp->left);
    
    				childSize++;
    			}
    			if (temp->right != NULL) {
    				q.push(temp->right);
    				childSize++;
    			}
    
    			parentSize--;
    			if (parentSize == 0) {
    				parentSize = childSize;
    				childSize = 0;
    				cout << endl;
    			}
    
    		}
    	}
    
    
    
    	//////////////////////////
    	///  在队列中插入结束标识来标识当前层结束
    	//////////////////////////
    	void LevelOrderUseEnd(TreeNode *root) {
    		res.clear();           /// add for result in vector
    
    		queue<TreeNode *> q;
    
    		q.push(root);
    		q.push(NULL);
    
    		while (q.empty() != true) {
    			TreeNode* node = q.front();
    			q.pop();
    
    			if (node) {
    				cout << node->val;
    				res.push_back(node->val);        /// add for result in vector
    
    				if (node->left != NULL) {
    					q.push(node->left);
    				}
    				if (node->right != NULL) {
    					q.push(node->right);
    				}
    			}
    			else if (q.empty() != true) {
    				q.push(NULL);
    				cout << endl;
    			}
    		}
    	}
    
    
    
    	//从前序遍历和中序遍历序列中构建树
    	struct TreeNode* reConstructBinaryTree(vector<int> pre, vector<int> in) {
    		//  前序遍历的长度跟中序遍历的长度应该相同
    		if (pre.size() != in.size()) {
    			cout << "the length of PRE and IN should be smae" << endl;
    			return NULL;
    		}
    
    		// 长度不能为0
    		int size = pre.size();
    		if (size == 0) {
    			cout << "it's a NULL tree(length = 0)" << endl;
    			return NULL;
    		}
    
    		int length = pre.size();
    		cout << "the length of your tree = " << length << endl;
    		int value = pre[0];      //  前序遍历的第一个结点是根节点
    		TreeNode *root = new TreeNode(value);
    
    		cout << "the root is" << root->val << endl;
    		//  在中序遍历中查找到根的位置
    		int rootIndex = 0;
    		for (rootIndex = 0; rootIndex < length; rootIndex++) {
    			if (in[rootIndex] == value) {
    				cout << "find the root at " << rootIndex << " in IN" << endl;
    				break;
    			}
    		}
    		if (rootIndex >= length) {
    			cout << "can't find root (value = " << value << ") in IN" << endl;
    			return NULL;
    		}
    
    		///  区分左子树和右子树
    		///  中序遍历中, 根左边的就是左子数, 右边的就是右子树
    		///  前序遍历中, 根后面是先遍历左子树, 然后是右子树
    
    		///  首先确定左右子树的长度, 从中序遍历in中确定
    		int leftLength = rootIndex;
    		int rightLength = length - 1 - rootIndex;
    		cout << "left length = " << leftLength << ", rightLength = " << rightLength << endl;
    		vector<int> preLeft(leftLength), inLeft(leftLength);
    		vector<int> preRight(rightLength), inRight(rightLength);
    		for (int i = 0; i < length; i++) {
    			if (i < rootIndex) {
    				//  前序遍历的第一个是根节点, 根后面的(leftLegnth = rootIndex) - 1个节点是左子树, 因此是i+1
    				preLeft[i] = pre[i + 1];
    				//  中序遍历前(leftLength = rootIndex) - 1个节点是左子树, 第rootIndex个节点是根
    				inLeft[i] = in[i];
    				cout << preLeft[i] << inLeft[i] << " ";
    			}
    			else if (i > rootIndex) {
    				//  前序遍历的第一个是根节点, 根后面的(leftLegnth = rootIndex) - 1个节点是左子树, 后面是右子树
    				preRight[i - rootIndex - 1] = pre[i];
    				//  中序遍历前(leftLength = rootIndex) - 1个节点是左子树, 第rootIndex个节点是根, 然后是右子树
    				inRight[i - rootIndex - 1] = in[i];
    				cout << preRight[i - rootIndex - 1] << inRight[i - rootIndex - 1] << " ";
    			}
    		}
    		cout << endl << "the left tree" << endl;
    		for (int i = 0; i < leftLength; i++) {
    			cout << preLeft[i] << inLeft[i] << " ";
    		}
    		cout << endl;
    		cout << "the right tree" << endl;
    		for (int i = 0; i < rightLength; i++) {
    			cout << preRight[i] << inRight[i] << " ";
    		}
    		cout << endl;
    		root->left = reConstructBinaryTree(preLeft, inLeft);
    		root->right = reConstructBinaryTree(preRight, inRight);
    		return root;
    	}
    
    };
    
    int main() {
    
    	//我们先建立一个tree 为了方便调试，依照之前的一个算法题，使用了 reConstructBinaryTree
    	int pre[] = { 1, 2, 4, 7, 3, 5, 6, 8 };
    	int in[] = { 4, 7, 2, 1, 5, 3, 8, 6 };
    	vector<int> preOrder(pre, pre + 8);
    	vector<int>  inOrder(in, in + 8);
    	Solution solu;
    	TreeNode *root = solu.reConstructBinaryTree(preOrder, inOrder);
    
    	//打印
    	solu.PrintFromTopToBottom(root);
    
    	return 0;
    }


使用代码中的第一种方法输出如下：

    
    the length of your tree = 8
    the root is1
    find the root at 3 in IN
    left length = 3, rightLength = 4
    24 47 72 35 53 68 86
    the left tree
    24 47 72
    the right tree
    35 53 68 86
    the length of your tree = 3
    the root is2
    find the root at 2 in IN
    left length = 2, rightLength = 0
    44 77
    the left tree
    44 77
    the right tree
    
    the length of your tree = 2
    the root is4
    find the root at 0 in IN
    left length = 0, rightLength = 1
    77
    the left tree
    
    the right tree
    77
    it's a NULL tree(length = 0)
    the length of your tree = 1
    the root is7
    find the root at 0 in IN
    left length = 0, rightLength = 0
    
    the left tree
    
    the right tree
    
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    the length of your tree = 4
    the root is3
    find the root at 1 in IN
    left length = 1, rightLength = 2
    55 68 86
    the left tree
    55
    the right tree
    68 86
    the length of your tree = 1
    the root is5
    find the root at 0 in IN
    left length = 0, rightLength = 0
    
    the left tree
    
    the right tree
    
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    the length of your tree = 2
    the root is6
    find the root at 1 in IN
    left length = 1, rightLength = 0
    88
    the left tree
    88
    the right tree
    
    the length of your tree = 1
    the root is8
    find the root at 0 in IN
    left length = 0, rightLength = 0
    
    the left tree
    
    the right tree
    
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    1
    23
    456
    78




















* * *





# COMMENT



