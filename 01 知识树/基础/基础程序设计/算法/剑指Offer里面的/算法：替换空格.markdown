 	
  1.


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO






  * **C++中的string是不是可变长度的？**




# MOTIVE






  * aaa





* * *





# 题目描述


请实现一个函数，将一个字符串中的空格替换成“%20”。 例如，当字符串为 We Are Happy 。则经过替换之后的字符串为 We%20Are%20Happy 。


# 问题解决




## 最粗暴的：新开数组，从前向后替换


如果不考虑在原来的字符串上替换的话, 那么我们直接再开一个数组，从前往后依次赋值，遇见空格，就填上%20, 否则就填当前字符。

但是这个肯定不是面试官期待的

那么怎么在原字符串上进行高效的替换呢？


## 比较暴力的从后往前替换


最原始的方法，我们遍历一遍字符串，对字符中每一个空格，都用%20来替换， 由于用%20替换空格会导致字符串长度的增加，因此需要注意




  * 从后往前遍历字符串


  * 每找到一个空格，需要将`' '`后面的字符串依次后移两位，预留出%20的空间


代码如下：


    #include "stdafx.h"
    #include <iostream>
    using namespace std;


    class Solution
    {
    public:
    	void replaceSpace(char *str, int length)
    	{
    		int i = length - 1, j;
    		int len = length;


    		for (i = length - 1; i >= 0; i--)//  从后往前遍历
    		{

    			if (str[i] == ' ')
    			{
    				//  从空格变成%20长度增加了2
    				len += 2;

    				for (j = len - 1; j > i + 2; j--)
    				{
    					str[j] = str[j - 2];
    				}
    				str[j--] = '0';
    				str[j--] = '2';
    				str[j--] = '%';
    			}
    			cout <<str <<endl;
    		}
    		str[len] = '\0';
    	}
    };


    int main()
    {
    	char str[16 + 1] = "a b c d";

    	Solution solu;
    	solu.replaceSpace(str, 10);
    	cout << str << endl;

    	return 0;
    }


注：上述代码中，原文是：str[10+1]，报错： Stack around the variable 'str' was corrupted。改为str[16+1] 后OK。**但是如果一开始给你的str就是这么短怎么办？怎么增长？**

输出：


    a b c d
    a b c d
    a b c d
    a b c d
    a b c%20d
    a b c%20d
    a b%20c%20d
    a b%20c%20d
    a%20b%20c%20d
    a%20b%20c%20d
    a%20b%20c%20d


可见，可以在每次添加 %20 之后，i 可以多减几次。


## 其实我们可以一开始统计一下空格数量


上面那个方法还是太暴力了，那么有没有什么更好的方法呢？

我们的代码，主要消耗的时间在于，如果有多个空格， 那么每遇到一个空格就进行移位。

而其实前面的移位是没必要的，因为如果再遇到空格，那么之前的移位全是无用功，因此我们可以考虑**先遍历一遍字符串, 计数空格的数目**,

我们知道了空格的数目，其实就是知道了替换后字符串的长度，那么只需要进行一次替换就可以了

因为我们的工作变为：




  * 遍历一遍字符串， 统计字符出现的数目, 计算替换后的字符串长度


  * 再遍历一遍字符串，完成替换


代码如下：


    #include <iostream>

    using namespace std;



    class Solution
    {
    public:
    	void replaceSpace(char *str, int length)
    	{
    		int i, j;
    		int count = 0;
    		int len = length;

    		//统计出空格数量
    		for (int i = 0; i < length; i++)
    		{
    			if (str[i] == ' ')
    			{
    				count++;
    			}
    		}

    		len = length + count * 2;
    		for (i = length - 1, j = len - 1; i >= 0 && j >= 0;)
    		{
    			if (str[i] == ' ')
    			{
    				str[j--] = '0';
    				str[j--] = '2';
    				str[j--] = '%';
    				i--;
    			}
    			else
    			{
    				str[j--] = str[i--];
    			}
    		}
    		str[len] = '0';
    	}
    };


    int main()
    {
    	char str[16 + 1] = "a b c d";//如果str的长度不够它后面扩充怎么办？

    	Solution solu;
    	solu.replaceSpace(str, 10);
    	cout << str << endl;

    	return 0;
    }


输出：


    a%20b%20c%20d


**还是同样的疑问：如果str开始的长度不够怎么办？要确认下。str是不是可变长度的？**











* * *





# COMMENT
