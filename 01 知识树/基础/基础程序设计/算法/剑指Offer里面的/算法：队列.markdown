---
author: evo
comments: true
date: 2018-04-03 15:13:02+00:00
layout: post
link: http://106.15.37.116/2018/04/03/queue/
slug: queue
title: 算法：队列
wordpress_id: 2865
categories:
- 随想与反思
tags:
- '@todo'
---

<!-- more -->

[mathjax]


# REF





 	
  * 七月在线 算法班




# TODO





 	
  * a




# MOTIVE





 	
  * 对队列相关算法进行总结





* * *










# 本次主要内容





 	
  * 队列

 	
    * 最短路径条数

 	
    * 拓扑排序




 	
  * 思考题：直方图矩形面积/收集雨水问题




# 


链表其实不难，只是考察你的基本功






# 队列 queue


队列是一种特殊的线性表，只允许在表的前端 front 进行删除操作，在表的后端 rear 进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。

队列元素服从先进先出原则  FIFO （First In First Out）


## 最短路径条数问题


给定如图所示的无向连通图，假定图中所有边的权值都为1，显然，从源点 A 到终点 T 的最短路径有很多条，那么这些最短路径的数目有多少？


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac399563abd2.png)


到后面涉及到图论的时候，我们会知道，只要涉及到最短路径，往往涉及到广度有限搜索。

算法分析：

权值相同的最短路径问题，则单源点Dijkstra算法退化成BFS广度优先搜索。

我们假定起点为0，终点为N，建立几个数组：



 	
  * 到每一个结点的步数 step[0…N-1] ，初始化为0

 	
  * 到每个结点的路径数目  pathNum[0…N-1]，初始化为0

 	
  * pathNum[0] = 1 即到开始的结点只有1步。


OK，我们现在来分析当从结点 i 扩展到邻接点 j 的时候，发生了什么：



 	
  * 若 step[j] 为 0，即，j 这个结点还从来没到过，则

 	
    * step[j]=step[i]+1         即，到结点 j 的步数相当于到结点 i 的步数加 1 。

 	
    * pathN[j] = pathN[i]     即，到结点 i 有多少种可能性，到结点 j 就有多少种可能性。




 	
  * 若step[j]==step[i]+1，即，j 这个结点之前来到过，则

 	
    * pathN[j] += pathN[i]    即：到 j 结点的路径又多了 pathN[i] 这么多条路径。






 	
  * 可考虑一旦扩展到结点N，则提前终止算法。


代码如下：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac399ade5838.png)





## 拓扑排序


对一个有向无环图(Directed Acyclic Graph，DAG)G进行拓扑排序，是将G中所有顶点排成线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。

一种可能的拓扑排序结果2->8->0->3->7->1->5->6->9->4->11->10->12


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a4d85d687.png)


拓扑排序的方法



 	
  * 从有向图中选择一个没有前驱(即入度为0)的顶点并且输出它；

 	
  * 从网中删去该顶点，并且删去从该顶点发出的全部有向边；

 	
  * 重复上述两步，直到剩余的网中不再存在没有前趋的顶点为止。


代码如下：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a4f090949.png)


拓扑排序的进一步思考



 	
  * 拓扑排序算法可以发现圈；其本质是不断输出入度为0的点；

 	
  * 可以用队列(或者栈)保存入度为0的点，避免每次遍历所有点查找入度；

 	
    * 排序列表中的点需要更新与之连接的点的入度。入度减小1之后，如果为0，放入队列(或者栈)中。




 	
  * 拓扑排序其实是给定了结点的一组偏序关系。

 	
  * “拓扑”一词的本意不限于此，在GIS中，它往往指点、线、面、体之间的相互邻接关系，即“橡皮泥集合”——通过揉捏几何形体而不受影响的空间相互关系。存储这些关系，往往能够对某些算法带来好处。

 	
    * 如：计算不自交的空间曲面是否能够围成三维体——任意三维边都邻接两个三维曲面。







扩展：拓扑的几何含义

一种关系：如三维数据间的拓扑关系


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a5262eba8.png)


三维拓扑重建


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a535971d9.png)


视角再次放大——面面、面线的拓扑


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a5441c751.png)





## 最长括号匹配


给定字符串，仅包含左括号‘(’和右括号‘)’，它可能不是括号匹配的，设计算法，找出最长匹配的括号子串，返回该子串的长度。

如：



 	
  * (()：2

 	
  * ()()：4

 	
  * ()(())：6

 	
  * (()())：6


算法分析

 	
  * 记起始匹配位置start=-1；最大匹配长度ml=0：

 	
  * 考察第i位字符c：

 	
  * 如果c为左括号，压栈；

 	
  * 如果c为右括号，它一定与栈顶左括号匹配；

 	
    * 如果栈为空，表示没有匹配的左括号，start=i，为下一次可能的匹配做准备

 	
    * 如果栈不空，出栈(因为和c匹配了)；

 	
      * 如果栈为空，i-start即为当前找到的匹配长度，检查i-start是否比ml更大，使得ml得以更新；

 	
      * 如果栈不空，则当前栈顶元素t是上次匹配的最后位置，检查i-t是否比ml更大，使得ml得以更新。







 	
  * 注：因为入栈的一定是左括号，显然没有必要将它们本身入栈，应该入栈的是该字符在字符串中的索引。


代码如下：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a5a0e5c41.png)


观察与思考



 	
  * 经过分析算法得知，只有在右括号和左括号的发生匹配时，才有可能更新最终解；

 	
  * 做记录前缀串p[0…i-1]中左括号数目与右括号数目的差x，若x为0时，考察是否最终解得以更新即可。这个差x，其实是入栈的数目，代码中用“深度”deep表达；

 	
  * 由于可能出现左右括号不相等——尤其是左括号数目大于右括号数目，所以，再从右向前扫描一次。

 	
  * 这样完成的代码，用deep值替换了stack栈，空间复杂度由O(N)降到O(1)。


代码如下：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a5c8e9d86.png)


p="()(()))"


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a5fa5a2a8.png)


空间复杂度仅O(1)的最长括号匹配

分析括号串p="(((()()))"：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6092f9e4.png)





# 逆波兰表达式RPN


逆波兰表达式Reverse Polish Notation，又叫后缀表达式。

习惯上，二元运算符总是置于与之相关的两个运算对象之间，即中缀表达方法。波兰逻辑学家J.Lukasiewicz于1929年提出了运算符都置于其运算对象之后，故称为后缀表示。

如：



 	
  * 中缀表达式：a+(b-c)*d

 	
  * 后缀表达式：abc-d*+


运算与二叉树

 	
  * 事实上，二元运算的前提下，中缀表达式可以对应一颗二叉树；逆波兰表达式即该二叉树后序遍历的结果。

 	
  * 中缀表达式：a+(b-c)*d

 	
  * 后缀表达式：abc-d*+

 	
    * 该结论对多元运算也成立，如“非运算”等







![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a661c0b16.png)


计算逆波兰表达式

计算给定的逆波兰表达式的值。有效操作只有+-*/，每个操作数都是整数。如：



 	
  * "2", "1", "+", "3", "*"：9——(2+1)*3

 	
  * "4", "13", "5", "/", "+"：6——4+(13/5)


逆波兰表达式的计算方法

 	
  * abc-d*+

 	
  * 若当前字符是操作数，则压栈

 	
  * 若当前字符是操作符，则弹出栈中的两个操作数，计算后仍然压入栈中

 	
    * 若某次操作，栈内无法弹出两个操作数，则表达式有误。





代码如下：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6944eec0.png)




![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6895ed2f.png)


逆波兰表达式



 	
  * 计算数学表达式的最常用方法；

 	
  * 在实践中，往往给出的不是立即数，而是变量名称；若经常计算且表达式本身不变，可以事先将中缀表达式转换成逆波兰表达式存储。


计算器

 	
  * 将中缀表达式转换成逆波兰表达式，然后正常计算。




![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6bd6d632.png)


逆波兰表达式的用途


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6cbcebf2.png)


省级行政区中哪几个最接近圆形？


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6d667b82.png)





# 思考题：直方图矩形面积


给定n个非负整数，表示直方图的方柱的高度，同时，每个方柱的宽度假定都为1；试找出直方图中最大的矩形面积。如：给定高度为：2,1,5,6,2,3，最大面积为10。


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6e572875.png)





# 思考题： 收集雨水问题


给定n个非负整数，表示直方图的方柱的高度，同时，每个方柱的宽度假定都为1。若使用这样形状的容器收集雨水，可以盛多少水量？

如输入：0,1,0,2,1,0,1,3,2,1,2,1；返回6。


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac3a6f9e2377.png)





# 小结





 	
  * 一般而言，栈的重要度大于队列。

 	
  * 栈的用途非常广泛，除了表达式求值，在深度优先遍历、保存现场等问题中常常出现。

 	
  * 关于栈的话题不限于此。

 	
    * 树、图的章节将继续讨论栈的内容。




 	
  * 思考： 一个栈(无穷大)的进栈序列为1,2,3,..n,共多少种不同的出栈序列？

 	
    * 该问题将在动态规划中继续讨论。










# COMMENT：




# REF：





 	
  1. 七月在线 算法



