---
author: evo
comments: true
date: 2018-05-22 13:31:18+00:00
layout: post
link: http://106.15.37.116/2018/05/22/%e7%ae%97%e6%b3%95%ef%bc%9a%e8%bf%9e%e7%bb%ad%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e6%9c%80%e5%a4%a7%e5%92%8c/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e8%bf%9e%e7%bb%ad%e5%ad%90%e6%95%b0%e7%bb%84%e7%9a%84%e6%9c%80%e5%a4%a7%e5%92%8c'
title: 算法：连续子数组的最大和
wordpress_id: 6294
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## 题目描述


在古老的一维模式识别中，常常需要计算连续子向量的最大和，当向量全为正数的时候，问题很好解决。但是，如果向量中包含负数，是否应该包含某个负数，并期望旁边的正数会弥补它呢？


### 样例


例如：{6,-3,-2,7,-15,1,2,2}

连续子向量的最大和为8 (从第0个开始,到第3个为止)。


# 题目解答




## 暴力方法


立即想到的最直接的方法就是找出所有的子数组，然后求出所有的和，遍历之后找到最大的哪个子数组。

如果把每个子数组都遍历出来，然后每个都求和，那么复杂度是 \(O(N^3)\) 。

而实际上，在遍历过程中，我们一般是这么计算的：下标 i 与 j 之间的区间和为 Sum[i,j] = Sum[i,j-1]+arr[j] ，也就是说，因此子数组的求和不是每次都重新遍历，因此算法复杂度是 \(O(N^2)\) 。

代码如下：

    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    
    class Solution {
    public:
    	int FindGreatestSumOfSubArray(vector<int> array) {
    		if (array.size() == 0) {
    			return 0;
    		}
    		int sum, maxSum = INT_MIN;
    		//遍历每一个可能存在的子数组
    		for (unsigned int i = 0; i < array.size(); i++) {
    			sum = 0;
    			for (unsigned int j = i; j < array.size(); j++) {
    				sum += array[j];
    				if (sum > maxSum) {
    					maxSum = sum;
    				}
    			}
    		}
    		return maxSum;
    	}
    };
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 6, -3, -2, 7, -15, 1, 2, 2 };
    	vector<int> vec1(arr1, arr1 + sizeof(arr1) / sizeof(arr1[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec1) << endl;
    
    	int arr2[] = { -2, -8, -1, -5, -9 };
    	vector<int> vec2(arr2, arr2 + sizeof(arr2) / sizeof(arr2[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec2) << endl;
    
    	return 0;
    }


输出：

    
    maxSum = 8
    maxSum = -1




那么有没有更方便的方法呢？


## 动态规划


**理解了，但是感觉上还是有点没转过弯来，为什么说是动态规划？动态规划的思想是什么样的？**

首先，我们知道：



 	
  * 一个以 i 为结尾的子数组，只可能是 i 本身，或者是一个以 i-1为结尾的子数组加上 i 这个数。


注意，我先不管这个子数组到底是以什么开始的，我只知道它的结尾是满足上面这个规律的。

那么，当我们求一个以 i 为结尾的子数组的和的时候，那么我就要比较：

\[f(i)= \left\{\begin{matrix} data(i)\\ f(i-1)_1+data(i)\\ f(i-1)_2+data(i)\\ f(i-1)_3+data(i)\\ f(i-1)_{\cdots }+data(i)\\ \end{matrix}\right.\]

OK，我们从第一个开始看：

\[f(0)= \left\{\begin{matrix} data(0)\\ \end{matrix}\right.\]

\[f(1)= \left\{\begin{matrix} data(1)\\ f(0)+data(1)\\ \end{matrix}\right.\]

\[f(2)= \left\{\begin{matrix} data(2)\\ f(1)+data(2)\\ \end{matrix}\right.\]

可见，实际上，对于 i 为结尾的子数组来说，我的 i-1 为结尾的子数组不管有多少个，但是 \(f(i-1)\) 是可以认为只有一个的，因为毕竟 \(f(i-1)\) 都是要真正求出来的。

OKOK，这样，我们之前的式子就变成：

\[f(i)= \left\{\begin{matrix} data(i)\\ f(i-1)+data(i)\\ \end{matrix}\right.\]

OK，这个时候，这里面的 \(data(i)\) 和  \(f(i-1)+data(i)\)  都是固定的，我们就要看看，哪个可以使 f(i) 相对大？

实际上，对于上面这个式子，有一点我们是可以肯定的，就是：如果 \(f(i-1)\) 是小于0 的，那么我们肯定选 \(data(i)\) ，如果 \(f(i-1)\) 是大于0的，那么我们肯定选 \(f(i-1)+data(i)\) 。

也就是说，我们选什么结果与 data(i) 是没有关系的，只与 \(f(i-1)\) 有关系。

OK，我们这样就把这个求出来的比较大 的 \(f(i)\) 存放起来。

然后，我们比较一下每个 i 对应的 \(f(i)\)  就找出最大值了。

代码如下：

    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    
    
    class Solution {
    private:
    	int dp[1000];
    public:
    	int FindGreatestSumOfSubArray(vector<int> array) {
    		if (array.size() == 0) {
    			return 0;
    		}
    
    		int temp = 0;
    		int maxSum = INT_MIN;
    		dp[0] = array[0];
    		//没有很理解
    		for (unsigned int i = 1; i < array.size(); i++) {
    			if (dp[i - 1] <= 0) {
    				dp[i] = array[i];//如果  dp[i - 1] 小于0，那么这个最大值就是第 i 个值
    			}
    			else {
    				dp[i] = dp[i - 1] + array[i];//否则，这个最大值就是 dp[i - 1]  加上第 i 个值
    			}
    			//判断这个时候的值是不是比最大值还大
    			if (dp[i] > maxSum) {
    				maxSum = dp[i];
    			}
    		}
    		//输出最大值对应的范围
    		return maxSum;
    	}
    };
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 6, -3, -2, 7, -15, 1, 2, 2 };
    	vector<int> vec1(arr1, arr1 + sizeof(arr1) / sizeof(arr1[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec1) << endl;
    
    	int arr2[] = { -2, -8, -1, -5, -9 };
    	vector<int> vec2(arr2, arr2 + sizeof(arr2) / sizeof(arr2[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec2) << endl;
    
    	return 0;
    }


输出：

    
    maxSum = 8
    maxSum = -1


那么还有更利害的方法吗？




## 贪心思想


**没有很理解。要仔细理解下。**

如果希望达到 O(n) 时间复杂度，我们就应该能够想到我们只能对整个数组进行一次扫描，在扫描过程中求出最大连续子序列和以及子序列的起点和终点位置。

假如输入数组为{1,-2,3,10,-4,7,2,-5}，我们尝试从头到尾累加其中的正数，

初始化和为0，第一步加上1，此时和为1，第二步加上-2，此时和为-1，第三步加上3，此时我们发现-1+3=2，最大和 2 反而比 3 一个单独的整数小，这是因为3加上了一个负数。

发现这个规律以后我们就重新作出累加条件：



 	
  * 如果当前和为负数，那么就放弃前面的累加和，从数组中的下一个数再开始计数。

 	
  * 否则我们就继续累计，并且保存当前的累计和。


这个方法其实就是动态规划算法的改进。

代码如下：

    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    class Solution {
    public:
    	int FindGreatestSumOfSubArray(vector<int> array) {
    		if (array.size() == 0) {
    			return 0;
    		}
    
    		int sum = 0, maxSum = INT_MIN;
    
    		for (int i = 0; i < array.size(); i++) {
    			sum += array[i];
    			cout << sum << endl;
    			// 如果当前和小于0, 就舍弃它, 重新开始累加
    			if (sum < 0) {
    				sum = 0;//对于全负数就不正确了
    			}
    			else if (sum > maxSum) {
    				// 否则的话累计当前和
    				maxSum = sum;
    			}
    		}
    		return maxSum;
    	}
    };
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 6, -3, -2, 7, -15, 1, 2, 2 };
    	vector<int> vec1(arr1, arr1 + sizeof(arr1) / sizeof(arr1[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec1) << endl;
    
    	int arr2[] = { -2, -8, -1, -5, -9 };
    	vector<int> vec2(arr2, arr2 + sizeof(arr2) / sizeof(arr2[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec2) << endl;
    
    	return 0;
    }<span id="mce_marker" data-mce-type="bookmark" data-mce-fragment="1">​</span>


输出：

    
    6
    3
    1
    8
    -7
    1
    3
    5
    maxSum = 8
    -2
    -8
    -1
    -5
    -9
    maxSum = -2147483648


可以看到上面还是有个问题：

如果整个数组的数据全是负数，那么我们的 maxSum 无法进行累计，最后仍为0。这个问题怎么解决呢？

整个数组全是负数，那么最大值也是负数，而这个最大值正好是数组连续子数组的最大和，因此我们维护一个最大值 maxNum 即可：



 	
  * 如果 maxNum<0，我们就直接返回 maxNum

 	
  * 如果 maxNum>0，那么我们就返回累计的 maxSum


如下：

    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    
    class Solution {
    public:
    	int FindGreatestSumOfSubArray(vector<int> array) {
    		if (array.size() == 0) {
    			return 0;
    		}
    		int maxNum = INT_MIN;//用来保存数据中的最大值
    		int maxSum = INT_MIN;//用来保存最大的和
    		int sum = 0;
    
    		for (int i = 0; i < array.size(); i++) {
    			sum += array[i];
    			cout << sum << endl;
    			// 如果当前和小于0, 就舍弃这个, 重新开始累加
    			if (sum < 0) {
    				sum = 0;
    			}
    			else if (sum > maxSum) {
    				//否则的话累计当前和
    				maxSum = sum;
    			}
    
    			//将数组中的最大值保存下来，这种情况是为了排除整个数组全为负数的特殊情况
    			if (array[i] > maxNum) {
    				maxNum = array[i];
    			}
    		}
    		//如果数组最大值大于0, 那么我们就直接返回累计的最大和
    		//如果数组最大值为负数, 说明整个数组都是负数, 那么就返回数组最大值
    		return (maxNum > 0) ? maxSum : maxNum;
    	}
    };
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 2, -1, 3,-4, -1, 1, 2, 2 };
    	vector<int> vec1(arr1, arr1 + sizeof(arr1) / sizeof(arr1[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec1) << endl;
    
    	int arr2[] = { -2, -8, -1, -5, -9 };
    	vector<int> vec2(arr2, arr2 + sizeof(arr2) / sizeof(arr2[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec2) << endl;
    
    	return 0;
    }


输出：

    
    2
    1
    4
    0
    -1
    1
    3
    5
    maxSum = 5
    -2
    -8
    -1
    -5
    -9
    maxSum = -1


但是其实有更好的办法，每次弄完后我们无需将那个 sum 置为 0，而是需要从新的位置（下一个位置）开始，因此此时其实 sum=array[i + 1]。

代码如下：

    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    
    class Solution {
    public:
    	int FindGreatestSumOfSubArray(vector<int> array) {
    		if (array.size() == 0) {
    			return 0;
    		}
    		int maxSum = INT_MIN;
    		int sum = 0;
    		for (unsigned int i = 0; i < array.size(); i++) {
    			if (sum <= 0) {
    				sum = array[i];
    			}
    			else {
    				sum += array[i];
    			}
    			cout << "num = " << array[i] << ", sum = " << sum << endl;
    			if (sum > maxSum) {
    				maxSum = sum;
    			}
    		}
    		return maxSum;
    	}
    };
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 2, -1, 3,-4, -1, 1, 2, 2 };
    	vector<int> vec1(arr1, arr1 + sizeof(arr1) / sizeof(arr1[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec1) << endl;
    
    	int arr2[] = { -2, -8, -1, -5, -9 };
    	vector<int> vec2(arr2, arr2 + sizeof(arr2) / sizeof(arr2[0]));
    	cout << "maxSum = " << solu.FindGreatestSumOfSubArray(vec2) << endl;
    
    	return 0;
    }


输出：

    
    num = 2, sum = 2
    num = -1, sum = 1
    num = 3, sum = 4
    num = -4, sum = 0
    num = -1, sum = -1
    num = 1, sum = 1
    num = 2, sum = 3
    num = 2, sum = 5
    maxSum = 5
    num = -2, sum = -2
    num = -8, sum = -8
    num = -1, sum = -1
    num = -5, sum = -5
    num = -9, sum = -9
    maxSum = -1








* * *





# COMMENT



