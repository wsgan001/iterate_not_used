---
author: evo
comments: true
date: 2018-05-23 04:17:25+00:00
layout: post
link: http://106.15.37.116/2018/05/23/%e7%ae%97%e6%b3%95%ef%bc%9a%e4%bb%8e1%e5%88%b0n%e6%95%b4%e6%95%b0%e4%b8%ad1%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e4%bb%8e1%e5%88%b0n%e6%95%b4%e6%95%b0%e4%b8%ad1%e5%87%ba%e7%8e%b0%e7%9a%84%e6%ac%a1%e6%95%b0'
title: 算法：从1到n整数中1出现的次数
wordpress_id: 6299
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * **没有结束**





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## 题目描述


从1到 n 整数中 1 出现的次数






# 题目解答




## 暴力方法


最简单直接的方法就是我们循环所有的 1~n 中的每个 number，计算每个 number 出现的次数。

    
    #include <iostream>
    using namespace std;
    
    
    class Solution {
    public:
    	// 统计1到n的整数中1出现的次数
    	int NumberOf1Between1AndN_Solution(int n) {
    		int count = 0;
    		for (int i = 1; i <= n; i++) {
    			count += NumberOf1(i);
    		}
    		return count;
    	}
    
    protected:
    	//统计number中1出现的次数
    	int NumberOf1(int number) {
    		int count = 0;
    		while (number != 0) {
    			if (number % 10 == 1) {
    				count++;
    			}
    			number /= 10;
    		}
    		return count;
    	}
    };
    
    
    int main() {
    	Solution solu;
    	cout << solu.NumberOf1Between1AndN_Solution(12) << endl;
    	cout << solu.NumberOf1Between1AndN_Solution(100) << endl;
    	cout << solu.NumberOf1Between1AndN_Solution(1000) << endl;
    	return 0;
    }


输出：

    
    5
    21
    301


此方法简单，容易理解，但它的问题是效率，时间复杂度为$O(N * lgN)$，N比较大的时候，需要耗费很长的时间。

#分治递归
我们重新分析下这个问题，

对于任意一个个位数n，只要n>=1,它就包含一个"1"；

n<1，即n=0时，则包含的"1"的个数为0。

于是我们考虑用分治的思想将任意一个n位数不断缩小规模分解成许多个个位数，这样求解就很方便。

但是，我们该如何降低规模？

仔细分析，我们会发现，

**任意一个n位数中"1"的个位可以分解为两个n-1位数中"1"的个数的和，最后再加上一个与最高位数相关的常数C**例如，

对于n=12，可以拆分为0109,1012，即 f(12) = f(10 - 1) + f(12 - 10) + 3,其中3是表示最高位为1的数字个数，这里就是10,11,12；

对于n=132，可以拆分为099，100132，即f(132)=f(100 -1) + f(132 - 100) + 33，33代表最高位为1的数字的个数，这里就是100~132百位数字的1出新了33次

对于232，可以拆分为099，100232，即f(232) = 2*f(100 - 1) + f(32) + 100，因为232大于199，所以它包括了所有最高位为1的数字即100~199，共100个。
综上，我们分析得出，最后加的常数C只跟最高位n1是否为1有关

当最高位为1时，常数C为原数字N去掉最高位后剩下的数字+1，如N=12时，$C = 2 + 1 = 3$，N=132时，$C = 32 + 1 = 33$
当最高位大于1时，常数C为$10^(bit-1)$，其中bit为N的位数，如N=232时，bit=3，$C = 10^(bit-1) = 10^2 = 100$。 于是，我们可以列出递归方程如下：











* * *





# COMMENT



