---
author: evo
comments: true
date: 2018-05-15 06:47:19+00:00
layout: post
link: http://106.15.37.116/2018/05/15/%e7%ae%97%e6%b3%95%ef%bc%9a%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97'
title: 算法：斐波那契数列
wordpress_id: 5779
categories:
- 随想与反思
tags:
- NOT_ADD
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa




# 题目




## 题目描述


大家都知道斐波那契数列， 现在要求输入一个整数n， 请你输出斐波那契数列的第n项。


# 题目解答




## OK，首先根据斐波那契的公式想到使用递归算法来计算


根据递推公式：



 	
  * f(0)=0

 	
  * f(1)=1

 	
  * f(n)=f(n-1)+f(n-2)


我们马上想到了如下递归代码：

    
    #include <iostream>
    using namespace std;
    
    
    class Solution {
    public:
    	int Fibonacci(int n) {
    		if (n <= 1) {
    			return n;
    		}
    		else {
    			return Fibonacci(n - 1) + Fibonacci(n - 2);
    		}
    	}
    };
    
    int main() {
    	Solution solu;
    	cout << solu.Fibonacci(10) << endl;;
    	return 0;
    }


输出：

    
    55


可见，还是比较清晰的。

但是当我把 10 换成200的时候，等了几分钟都没有出现结果，事实上，这种方法计算的时间复杂度是以 n 的指数的方式递增的，因为每个Fib拆成两个Fib之后，每个Fib还要再往下拆。而且，由于递归嵌套的层次太多，中间的变量一直得不到释放，可能在计算过程中就会内存不足 。

OK，既然这种递归的方式虽然看起来简介，但是每个Fib的计算都要拆，而且还有可能会内存不足，那么我们不用递归，直接用循环写呢？


## 不用递归，用循环


将递推公式进行展开：

    
    #include <iostream>
    using namespace std;
    
    
    class Solution {
    public:
    	int Fibonacci(int n) {
    		if (n <= 1) {
    			return n;
    		}
    		long one = 0;
    		long two = 1;
    		long res = 0;
    
    		for (int i = 2; i <= n; i++) {
    			if (two > INT_MAX - one) {
    				cout << "bigger than ini_max"<<endl;//已经溢出了
    			}
    			res = one + two;
    			one = two;
    			two = res;
    		}
    		return res;
    	}
    };
    
    int main() {
    	Solution solu;
    	cout << solu.Fibonacci(200) << endl;;
    	return 0;
    }


结果：

    
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    ...略去
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    bigger than ini_max
    -552082539


嗯，这次，即使我计算的是200，也是非常快的就算出来了。计算的速度比之前递归的时候快了非常多，而且也不会有内存不足的问题。

不过，中间int在相加的时候已经溢出了，所以最后的结果是负值。

不过这种方式还是不错的，非常快，而且内存占用也比递归小得多。


## 还有更快的方法？


**这个地方看的不是很明白，结合书上再看下。**

实际上，上面这个算法还不是最快的，下面介绍一种时间复杂度是 O(logn) 的方法。**这么利害**

OK，我们先观察一下这个式子：

\[\begin{align*}a(n)&=a(n - 1) + a(n - 2)\\&= 2 * a(n - 2) + a (n - 3)\\&=3 * a(n - 3) + 2 * a(n - 4)\\&=5 * a(n - 4) + 3 * a(n - 5)\\&=\cdots \\&=a(k) * a(n - k + 1) + a(k - 1) * a(n - k)\end{align*}\]

OK，因此，



 	
  * 若令 n = 2k 得： \(\begin{align*} a(2k) &= a(k) * a(k + 1) + a(k-1) * a(k) \\&= a(k) * [a(k) + a(k - 1)] + a(k-1) * a(k) \\&= a(k) ^ 2 + 2 * a(k) * a(k - 1) 2\end{align*}\)

 	
  * 若令 n = 2k - 1 得： \(\begin{align*} a(2k - 1) &= a(k) * a(k) + a(k - 1) * a(k - 1) \\&= a(k) ^ 2 + a(k - 1) ^ 2\end{align*}\)


OK，在介绍这种方法之前，我们先介绍一个数学公式：

{ f(n), f(n-1), f(n-1), f(n-2) } ={ 1, 1, 1, 0 } n-1

注：上面的式子中 { f(n+1), f(n), f(n), f(n-1) } 表示一个矩阵。在矩阵中第一行第一列是f(n+1)，第一行第二列是f(n)，第二行第一列是f(n)，第二行第二列是f(n-1)。

有了这个公式，要求得f(n)，我们只需要求得矩阵{1, 1, 1,0}的n-1次方，因为矩阵{1, 1, 1,0}的n-1次方的结果的第一行第一列就是f(n)。这个数学公式用数学归纳法不难证明。感兴趣的朋友不妨自己证明一下。

现在的问题转换为求矩阵{1, 1, 1, 0}的乘方。如果简单第从0开始循环，n次方将需要n次运算，并不比前面的方法要快。但我们可以考虑乘方的如下性质：

/ an/2*an/2 n为偶数时 an= \ a(n-1)/2*a(n-1)/2 n为奇数时


要求得n次方，我们先求得n/2次方，再把n/2的结果平方一下。如果把求n次方的问题看成一个大问题，把求n/2看成一个较小的问题。这种把大问题分解成一个或多个小问题的思路我们称之为分治法。这样求n次方就只需要logn次运算了。




实现这种方式时，首先需要定义一个2×2的矩阵，并且定义好矩阵的乘法以及乘方运算。当这些运算定义好了之后，剩下的事情就变得非常简单。完整的实现代码如下所示。




    
    #include <iostream>
    using namespace std;
    
    class Solution {
    public:
    	static int pre;//每次Fibonacci调用结束后，存的都是Fibonacci(n)的值
    	static int post;//每次Fibonacci调用结束后，存的都是Fibonacci(n-1)的值
    	int temp;
    
    public:
    	int Fibonacci(int n) {
    		// if   n = 0            #=> 0
    		// else n = 1 || n = 2   #=> 1
    		if (n <= 2) {
    			if (n == 0) 
    				return 0;
    			pre = 1;
    			post = 1;
    			return pre;
    		}
    
    		// n 为奇数， 则做减一操作， 函数回调时
    		//        pre：        f(n) = f(n - 1) + f(n - 2)
    		//        post：   f(n - 1) = f(n) - f(n - 2)
    		if (n % 2 == 1) {
    			Fibonacci(n - 1);
    			pre = pre + post;
    			post = pre - post;
    			return pre;
    		}
    
    		// n为偶数时不断除二
    		// 函数回调时,f(n) 通过 f(n/2) 来计算:
    		//
    		//  设 n = 2k：
    		//          f(2k) = f(k)  * f(k + 1) + f(k-1) * f(k)
    		//                = f(k) * [f(k) + f(k - 1)] + f(k-1) * f(k)
    		//                = f(k) ^ 2 + 2 * f(k) * f(k - 1)
    		// 设 n = 2k-1：
    		//      f(2k - 1) = f(k) * f(k) + f(k - 1)  * f(k - 1)
    		//                = f(k)^2 + f(k - 1)^2
    		//
    		Fibonacci(n / 2);
    		temp = pre;
    		// f(2k) = f(k)^2 + 2 * f(k) * f(k - 1)
    		pre = pre * pre + 2 * pre * post;
    		// f(2k - 1) = f(k) * f(k) + f(k - 1) * f(k - 1)
    		post = temp*temp + post*post;
    		return pre;
    	}
    };
    
    int Solution::pre = 0;
    int Solution::post = 0;
    
    
    int main() {
    	Solution solu;
    	cout << solu.Fibonacci(200) << endl;;
    	return 0;
    }


输出：

    
    -552082539


嗯，也是非常快的，实际上，这种解法的时间复杂度是 O(logn) ，但是这种算法不够实用，只对应这种比较特殊的场景。







* * *





# COMMENT



