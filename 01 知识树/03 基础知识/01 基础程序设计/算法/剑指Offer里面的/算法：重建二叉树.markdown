---
author: evo
comments: true
date: 2018-05-15 01:21:21+00:00
layout: post
link: http://106.15.37.116/2018/05/15/%e7%ae%97%e6%b3%95%ef%bc%9a%e9%87%8d%e5%bb%ba%e4%ba%8c%e5%8f%89%e6%a0%91/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e9%87%8d%e5%bb%ba%e4%ba%8c%e5%8f%89%e6%a0%91'
title: 算法：重建二叉树
wordpress_id: 5737
categories:
- 随想与反思
tags:
- NOT_ADD
---

<!-- more -->

[mathjax]

**注：非原创，推荐直接看原文**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * **不是特别清楚，要自己写下**




# MOTIVE





 	
  * aaa





* * *





# 题目




## 题目描述


输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。

假设输入的前序遍历和中序遍历的结果中都不含重复的数字。


## 输入


前序遍历序列{1,2,4,7,3,5,6,8}

中序遍历序列{4,7,2,1,5,3,8,6}

则重建二叉树并返回。


# 题目解决


这道题还是比较简单的，我们知道



 	
  * 前序遍历的顺序为：根左右

 	
  * 中序遍历的顺序为：左根右


实际上在学习计算机的时候，我们知道怎么从前序遍历和中序遍历中重建出二叉树：

 	
  1. 我们先根据前序遍历序列的第一个确定根，然后在中序遍历的序列中找到根的位置，根左边的就是其左子树，右边就是其右子树。嗯

 	
  2. 构建根和左右子树

 	
  3. 递归的进行1和2。嗯


可见，这个可以用递归的方法来做。

代码如下：

    
    #include <iostream>
    #include <vector>
    
    using namespace std;
    
    struct TreeNode {
    	int val;
    	TreeNode *left;
    	TreeNode *right;
    
    	TreeNode(int x)
    		: val(x), left(NULL), right(NULL) {
    	}
    
    	//
    	static void PreOrder(TreeNode *root) {
    		if (root == NULL) {
    			return;
    		}
    		cout << root->val;
    		PreOrder(root->left);
    		PreOrder(root->right);
    	}
    	static void InOrder(TreeNode *root) {
    		if (root == NULL) {
    			return;
    		}
    		InOrder(root->left);
    		cout << root->val;
    		InOrder(root->right);
    	}
    };
    
    
    
    class Solution {
    public:
    	struct TreeNode* reConstructBinaryTree(vector<int> pre, vector<int> in) {
    
    		//  前序遍历的长度跟中序遍历的长度应该相同
    		if (pre.size() != in.size()) {
    			cout << "the length of PRE and IN should be smae" << endl;
    			return NULL;
    		}
    
    		// 长度不能为0
    		int size = pre.size();
    		if (size == 0) {
    			cout << "it's a NULL tree(length = 0)" << endl;
    			return NULL;
    		}
    
    		//树的长度
    		int length = pre.size();
    		cout << "the length of your tree = " << length << endl;
    
    		//根据前序遍历的第一个结点也就是根节点创建TreeNode
    		int value = pre[0];
    		TreeNode *root = new TreeNode(value);
    		cout << "the root is " << root->val << endl;
    
    		//  在中序遍历中查找到根的位置
    		int rootIndex = 0;
    		for (rootIndex = 0; rootIndex < length; rootIndex++) {
    			if (in[rootIndex] == value) {
    				cout << "find the root at " << rootIndex << " in IN" << endl;
    				break;
    			}
    		}
    		if (rootIndex >= length) {
    			cout << "can't find root (value = " << value << ") in IN" << endl;
    			return NULL;
    		}
    
    		///  区分左子树和右子树
    		///  中序遍历中, 根左边的就是左子数, 右边的就是右子树
    		///  前序遍历中, 根后面是先遍历左子树, 然后是右子树
    
    		///  首先确定左右子树的长度, 从中序遍历in中确定
    		int leftLength = rootIndex;
    		int rightLength = length - 1 - rootIndex;
    		cout << "left length = " << leftLength << ", rightLength = " << rightLength << endl;
    		vector<int> preLeft(leftLength), inLeft(leftLength);
    		vector<int> preRight(rightLength), inRight(rightLength);
    		for (int i = 0; i < length; i++) {
    			if (i < rootIndex) {
    				//  前序遍历的第一个是根节点, 根后面的(leftLegnth = rootIndex) - 1个节点是左子树, 因此是i+1
    				preLeft[i] = pre[i + 1];
    				//  中序遍历前(leftLength = rootIndex) - 1个节点是左子树, 第rootIndex个节点是根
    				inLeft[i] = in[i];
    				cout << preLeft[i] << inLeft[i] << " ";
    			}
    			else if (i > rootIndex) {
    				//  前序遍历的第一个是根节点, 根后面的(leftLegnth = rootIndex) - 1个节点是左子树, 后面是右子树
    				preRight[i - rootIndex - 1] = pre[i];
    				//  中序遍历前(leftLength = rootIndex) - 1个节点是左子树, 第rootIndex个节点是根, 然后是右子树
    				inRight[i - rootIndex - 1] = in[i];
    				cout << preRight[i - rootIndex - 1] << inRight[i - rootIndex - 1] << " ";
    			}
    		}
    		cout << endl << "the left tree" << endl;
    		for (int i = 0; i < leftLength; i++) {
    			cout << preLeft[i] << inLeft[i] << " ";
    		}
    		cout << endl;
    		cout << "the right tree" << endl;
    		for (int i = 0; i < rightLength; i++) {
    			cout << preRight[i] << inRight[i] << " ";
    		}
    		cout << endl;
    
    		root->left = reConstructBinaryTree(preLeft, inLeft);
    		root->right = reConstructBinaryTree(preRight, inRight);
    		return root;
    	}
    };
    
    int main() {
    	int pre[] = { 1, 2, 4, 7, 3, 5, 6, 8 };
    	int in[] = { 4, 7, 2, 1, 5, 3, 8, 6 };
    
    	vector<int> preOrder(pre, pre + 8);
    	vector<int>  inOrder(in, in + 8);
    
    	Solution solu;
    	TreeNode *root = solu.reConstructBinaryTree(preOrder, inOrder);
    
    	cout << "PreOrder";
    	TreeNode::PreOrder(root);
    	cout << endl;
    
    	cout << "InOrder ";
    	TreeNode::InOrder(root);
    	cout << endl;
    
    	return 0;
    }


输出：

    
    the length of your tree = 8
    the root is 1
    find the root at 3 in IN
    left length = 3, rightLength = 4
    24 47 72 35 53 68 86
    the left tree
    24 47 72
    the right tree
    35 53 68 86
    the length of your tree = 3
    the root is 2
    find the root at 2 in IN
    left length = 2, rightLength = 0
    44 77
    the left tree
    44 77
    the right tree
    
    the length of your tree = 2
    the root is 4
    find the root at 0 in IN
    left length = 0, rightLength = 1
    77
    the left tree
    
    the right tree
    77
    it's a NULL tree(length = 0)
    the length of your tree = 1
    the root is 7
    find the root at 0 in IN
    left length = 0, rightLength = 0
    
    the left tree
    
    the right tree
    
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    the length of your tree = 4
    the root is 3
    find the root at 1 in IN
    left length = 1, rightLength = 2
    55 68 86
    the left tree
    55
    the right tree
    68 86
    the length of your tree = 1
    the root is 5
    find the root at 0 in IN
    left length = 0, rightLength = 0
    
    the left tree
    
    the right tree
    
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    the length of your tree = 2
    the root is 6
    find the root at 1 in IN
    left length = 1, rightLength = 0
    88
    the left tree
    88
    the right tree
    
    the length of your tree = 1
    the root is 8
    find the root at 0 in IN
    left length = 0, rightLength = 0
    
    the left tree
    
    the right tree
    
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    it's a NULL tree(length = 0)
    PreOrder12473568
    InOrder 47215386


















* * *





# COMMENT



