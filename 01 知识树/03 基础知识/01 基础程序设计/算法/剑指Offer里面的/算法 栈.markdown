
# TODO


  * PPT的目录上写了三个，但是好像只讲了一个







# 主要内容

  * 括号匹配
  * 最长括号匹配
  * 计算逆波兰表达式





# 堆栈 stack


堆栈是一种特殊的线性表，只允许在表的顶端top进行插入或者删除操作，是一种操作受限制的线性表。
栈元素服从后进先出原则    LIFO   （Last In First Out）


## 括号匹配


给定字符串，仅由 "()[]{}" 六个字符组成。括号必须以正确的顺序配对，设计算法，判断该字符串是否有效。

比如：“()”、“()[]” 是有效的，但 “([)]” 无效。

先考虑一下这么一种方法，看看是否可行：

对于给定的字符串str[0…N-1]，它的前缀串str[0…k]小括号的左括号减去小括号的右括号的数目，记做p[0]；同理使用 p[1]、 p[2] 记录中括号和大括号的信息。然后呢，我们将k从0到N-1遍历：




  * 对于0≤k≤N-2：p[0]≥0、 p[1]≥0， p[2]≥0

  * 对于k=N-1， p[0]==0、 p[1]==0， p[2]==0

  * 则字符串括号匹配，否则，不匹配。


这种思路是有问题的，因为，比如 “([)]” 这种情况会被判定为有效。为什么呢？因为上面的方法中没有考虑大小括号的顺序。

因此，我们分析如下：

在考察第 i 位字符 c 与前面的括号是否匹配时：


  * 如果c为左括号，开辟缓冲区记录下来，希望c能够与后面出现的同类型最近右括号匹配。

  * 如果c为右括号，考察它能否与缓冲区中的左括号匹配。而这个匹配过程，就是检查缓冲区最后出现的同类型左括号。


因此，它就需要一种后进先出的数据结构，也就是栈。

因此我们使用栈来处理，流程如下：


  - 从前向后扫描字符串：
  - 遇到左括号 x，就压栈 x；
  - 遇到右括号 y：
      - 如果发现栈顶元素 x 和该括号 y 匹配，则栈顶元素出栈，继续判断下一个字符。
      - 如果栈顶元素 x 和该括号 y 不匹配，字符串不匹配；
      - 如果栈为空，字符串不匹配；
  - 扫描完成后，如果栈恰好为空，则字符串匹配，否则，字符串不匹配。


代码如下：

```cpp
#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <stack>

bool IsLeftParentheses(char c)
{
	return (c == '(') || (c == '[') || (c == '{');
}
bool IsMatch(char left, char c){
	if (left == '(')
		return c == ')';
	if (left == '[')
		return c == ']';
	if (left = '{')
		return c == '}';
	return false;
}

bool Matchparentheses(const char* p)
{
	std::stack<char> s;
	char cur;
	while (*p)
	{
		cur = *p;
		if (IsLeftParentheses(cur))
		{
			s.push(cur);
		}
		else{
			if (s.empty() || !IsMatch(s.top(), cur))
			{
				return false;
			}
			s.pop();
		}
		p++;
	}
}

int _tmain(int argc, _TCHAR* argv[])
{
	char *p = "(({})[])[()]";
	bool bMatch = Matchparentheses(p);
	if (bMatch)
	{
		printf("匹配");
	}
	else
	{
		printf("不匹配");
	}
	return 0;
}
```

输出：


    匹配











# REF

1. aaa
