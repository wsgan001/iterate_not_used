---
author: evo
comments: true
date: 2018-05-28 01:39:15+00:00
layout: post
link: http://106.15.37.116/2018/05/28/%e7%ae%97%e6%b3%95%ef%bc%9a%e6%89%91%e5%85%8b%e7%89%8c%e9%a1%ba%e5%ad%90/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e6%89%91%e5%85%8b%e7%89%8c%e9%a1%ba%e5%ad%90'
title: 算法：扑克牌顺子
wordpress_id: 6930
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## **题目描述**


LL今天心情特别好，因为他去买了一副扑克牌，发现里面居然有2个大王，2个小王(一副牌原本是54张^_^)...

他随机从中抽出了5张牌，想测测自己的手气，看看能不能抽到顺子，如果抽到的话，他决定去买体育彩票 ，嘿嘿！！“红心A，黑桃3，小王，大王，方片5”， “Oh My God!”不是顺子.....LL不高兴了，他想了想，决定 大\小王 可以看成任何数字，并且 A 看作 1，J 为 11，Q 为 12，K 为 13。 上面的5张牌就可以变成 “1,2,3,4,5” (大小王分别看作2和4)，“So Lucky!”。

<del>现在，要求你使用这幅牌模拟上面的过程，然后告诉我们 LL 的运气如何。</del>

现在，给定5张牌，确认一下是否是 LL 认为的顺子。

为了方便起见，你可以认为大小王是0。

**样例输入**



 	
  * 3 5 1 0 4

 	
  * 3 5 4 7 6

 	
  * 3 5 7 4 8


**样例输出**



 	
  * So Lucky!

 	
  * So Lucky!

 	
  * Oh My God!




# 题目解答


没明白这为什么是一道算法题？嗯，看了之后的确是一道算法题，不过是验证一个数组是不是可以看成一个顺子。 我之前看题目说：“ 告诉我们 LL 的运气如何 ” ，还以为要计算他随机抽出来5张牌称为一个顺子的概率是多少。。


## 排序后看 0 能不能填补空缺


可以把5张牌看成由5个数字组成的数组。大、小王是特殊的数字，我们不妨把它们定义为0，这样就能和其他扑克牌区分开来了。

接下来我们分析怎样判断5个数字是不是连续的，最直观的方法是把数组排序。

值得注意的是，由于0可以当成任意数字，我们可以用0去补满数组中的空缺。如果排序之后的数组不是连续的，即相邻的两个数字相隔若干个数字，但只要我们有足够的0可以补满这两个数字的空缺，这个数组实际上还是连续的。

举个例子，数组排序之后为  {0,1,3,4,5}，在 1 和 3 之间空缺了一个 2，刚好我们有一个 0，也就是我们可以把它当成 2 去填补这个空缺。嗯，是的。

于是我们需要做3件事：



 	
  1. 首先把数组排序

 	
  2. 再统计数组中的 0 的个数

 	
  3. 最后统计排序之后的数组中相邻数字之间的空缺总数。如果空缺的总数小于或者等于 0 的个数，那么这个数组就是连续的；反之则不连续。


最后，我们还需要注意一点：如果数组中的非0数字重复出现，则该数组不是连续的。**嗯，是要注意的！**

    
    #include <iostream>
    #include <vector>
    #include <algorithm>
    using namespace std;
    
    class Solution {
    public:
    	bool IsContinuous(vector<int> numbers) {
    		if (numbers.size() == 0) {
    			return false;
    		}
    		sort(numbers.begin(), numbers.end());
    
    		// 统计 0 的个数
    		int zero_num = 0;
    		while (numbers[zero_num] == 0) {
    			zero_num++;
    		}
    		cout << "zero_num = " << zero_num << endl;
    
    		//   然后看0能不能填补两个数之间的空缺
    		for (int i = zero_num + 1; i < numbers.size(); i++) {
    			cout << numbers[i - 1] << ", " << numbers[i] << endl;
    
    			// 如果数组中的非0数字重复出现，则该数组不是连续的。
    			if (numbers[i] == numbers[i - 1]) {
    				return false;
    			}
    			else {
    				//  否则填补空缺, 无空缺的情况不用单独判断(空缺为0)
    				zero_num -= (numbers[i] - numbers[i - 1] - 1);
    			}
    		}
    		//看看剩余的 0 的个数
    		cout << "zero_num = " << zero_num << endl;
    		if (zero_num >= 0) {
    			return true;
    		}
    		else {
    			return false;
    		}
    	}
    };
    
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 1, 3, 2, 6, 4 };
    	vector<int> vec1(arr1, arr1 + 5);
    	cout << solu.IsContinuous(vec1) << endl << endl;
    
    	int arr2[] = { 3, 5, 1, 0, 4, };
    	vector<int> vec2(arr2, arr2 + 5);
    	cout << solu.IsContinuous(vec2) << endl << endl;
    
    	int arr3[] = { 1, 0, 0, 1, 0 };
    	vector<int> vec3(arr3, arr3 + 5);
    	cout << solu.IsContinuous(vec3) << endl << endl;
    	return 0;
    }


输出：

    
    zero_num = 0
    1, 2
    2, 3
    3, 4
    4, 6
    zero_num = -1
    0
    
    zero_num = 1
    1, 3
    3, 4
    4, 5
    zero_num = 0
    1
    
    zero_num = 3
    1, 1
    0





## 非 0 元素的最大值最小值的差不超过 4


我们再看一下题目中对顺子的要求：



 	
  * 5 张牌，顺子，除 0 之外不能重复


OK，我们立马感觉到这个可以进一步转化成：

 	
  * 非 0 元素不能重复

 	
  * 非 0 元素的最大值最小值的差不超过 4


注意：这个地方需要考虑0 的个数吗？实际上不用考虑了，因为，如果不重复的话，那么如果不超过4，说明最大值和最小值之间的差最大是4，只要这样限制了，那么无论里面0有多少个，都可以填满空掉的地方，如果0太多了，而差值有只有1，那么就把0往后排就行。

OK，这样的话，就只需要满足上面这两个条件就行：

 	
  * 对于第一个条件，我们可以维护一个非 0 的最大最小值，判断差即可。

 	
  * 对于第二个条件，我们可以通过位运算，设置一个标识 flag，比如 对于 一个数 flag 来说，首次遇见一个元素number时候，就设置标识flag的第number位为1，下次通过检测第number即可发现此元素是否重复。**嗯，这个与使用数组来作为保存标记的方式相同。**


代码如下：

    
    #include <iostream>
    #include <vector>
    #include <algorithm>
    using namespace std;
    
    #define BIT_GET(number, pos) ((number) >> (pos) & 1)     /// 用宏得到某数的某位
    #define BIT_SET(number, pos) ((number) |= 1 << (pos))    /// 把某位置1
    #define BIT_CLR(number, pos) ((number) &= ~(1 << (pos))) /// 把某位清0
    #define BIT_CPL(number, pos) ((number) ^= 1 << (pos))    /// 把number的POS位取反
    
    class Solution {
    public:
    	bool IsContinuous(vector<int> numbers) {
    		if (numbers.size() != 5) {
    			return false;
    		}
    		int min = INT_MAX;
    		int max = INT_MIN;
    		int flag = 0;
    
    		for (int i = 0; i < numbers.size(); i++) {
    			int num = numbers[i];
    
    			//  牌只能在0~13之间
    			if (num < 0 || num > 13) {
    				return false;
    			}
    			else if (num == 0) {
    				continue; //  0 不参与最大最小牌的比对
    			}
    
    			//  非0元素不能重复
    			if (BIT_GET(flag, num) == 1) {
    				return false;				//  如果flag的第num位为1, 说明num重复
    			}
    			else {
    				BIT_SET(flag, num);     //  将标识flag的第num位置为0
    			}
    
    			//  使用这个num更新最大最小值
    			if (num > max) {
    				max = num;
    			}
    			if (num < min) {
    				min = num;
    			}
    			cout << "max = " << max << ", min = " << min << endl;
    
    			//  如果最大值和最小值的差值大于4, 那么必应不能补齐
    			if (max - min > 4) {
    				cout << "max = " << max << ", min = " << min << endl;
    				return false;
    			}
    		}
    		return true;
    	}
    };
    
    
    int main() {
    	Solution solu;
    
    	int arr1[] = { 1, 3, 2, 6, 4 };
    	vector<int> vec1(arr1, arr1 + 5);
    	cout << solu.IsContinuous(vec1) << endl << endl;
    
    	int arr2[] = { 3, 5, 1, 0, 4, };
    	vector<int> vec2(arr2, arr2 + 5);
    	cout << solu.IsContinuous(vec2) << endl << endl;
    
    	int arr3[] = { 1, 0, 0, 1, 0 };
    	vector<int> vec3(arr3, arr3 + 5);
    	cout << solu.IsContinuous(vec3) << endl << endl;
    	return 0;
    }


输出：

    
    max = 1, min = 1
    max = 3, min = 1
    max = 3, min = 1
    max = 6, min = 1
    max = 6, min = 1
    0
    
    max = 3, min = 3
    max = 5, min = 3
    max = 5, min = 1
    max = 5, min = 1
    1
    
    max = 1, min = 1
    0


注意：上面的 int 对应的INT_MAX 是 32767 (2^15-1) 因此，对应 14 位的二进制数，因此是可以存放下 13 个标识的。

**上面的代码中，对于位的操作还是很好的：**

    
    #define BIT_GET(number, pos) ((number) >> (pos) & 1)     /// 用宏得到某数的某位
    #define BIT_SET(number, pos) ((number) |= 1 << (pos))    /// 把某位置1
    #define BIT_CLR(number, pos) ((number) &= ~(1 << (pos))) /// 把某位清0
    #define BIT_CPL(number, pos) ((number) ^= 1 << (pos))    /// 把number的POS位取反


**很 nice 啊。**

**对于 #define 也要总结下。**













* * *





# COMMENT



