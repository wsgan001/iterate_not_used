
# REF

- [CodingInterviews](https://github.com/gatieme/CodingInterviews)





# 题目




## 题目描述


设计一个不能被继承的类


##




# 题目解答


首先想到的是在 C++ 中，子类的构造函数会自动调用父类的构造函数，同样，子类的析构函数也会自动调用父类的析构函数。

那么要想一个类不能被继承，我们只要把它的构造函数和析构函数都定义为私有函数就行。这样的话，如果一个类试图从它进行继承， 就必然会由于试图调用构造函数、析构函数而导致编译错误。


    class SealedClass
    {
    private :
        SealedClass( ){ }
        ~SealedClass( ){ };
    };


可是，既然这个类的构造函数和析构函数都是私有函数了，那么我们怎样才能得到这个类的实例呢？

实际上我们有很多种方法来实现类的创建：**还是要好好整理下相关的东西的。**




  * 定义静态函数或者静态变量来创建和释放类的实例


  * 友元函数可以访问类的私有成员


  * 友元类可以访问类的私有成员




## 静态的创建和释放类的实例




### [](https://github.com/gatieme/CodingInterviews/tree/master/048-%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%BB%A7%E6%89%BF%E7%9A%84%E7%B1%BB#41%E9%9D%99%E6%80%81%E5%87%BD%E6%95%B0)静态函数




    #include <iostream>
    using namespace std;

    class SealedClass {
    public:
    	static SealedClass* GetInstance() {
    		return new SealedClass();
    	}
    private:
    	SealedClass() {}
    	~SealedClass() {};
    };

    int main() {
    	SealedClass *pb = SealedClass::GetInstance();
    	return 0;
    }




### 静态变量




    #include <iostream>
    using namespace std;


    class SealedClass {
    public:
    	static SealedClass* GetInstance() {
    		if (m_sc == NULL) {
    			m_sc = new SealedClass();
    		}
    		return m_sc;
    	}
    	static void Destroy() {
    		if (m_sc != NULL) {
    			delete m_sc;
    		}
    	}
    private:
    	SealedClass() {}
    	~SealedClass() {}
    	static SealedClass  *m_sc;//静态变量
    };


    SealedClass* SealedClass::m_sc = NULL;//为什么是可以在这个地方声明的？

    //会提示： warning C4624: “Base”: 未能生成析构函数，因为基类析构函数不可访问或已被删除
    class Base : public SealedClass {
    };


    int main() {
    	SealedClass *pb = SealedClass::GetInstance();
    	SealedClass::Destroy();

    	pb = NULL;

    	//Base b;  //  error
    	return 0;
    }


**这个：SealedClass* SealedClass::m_sc = NULL;   没看懂，为什么是可以在这个地方声明的？**




## 友元实现




### [](https://github.com/gatieme/CodingInterviews/tree/master/048-%E4%B8%8D%E8%83%BD%E8%A2%AB%E7%BB%A7%E6%89%BF%E7%9A%84%E7%B1%BB#51%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0)友元函数实现




    #include <iostream>
    using namespace std;


    class SealedClass {
    private:
        SealedClass() {}
        ~SealedClass() {}
    public:
        friend SealedClass* GetInstance();
    };


    SealedClass* GetInstance() {
        return new SealedClass();
    }

    //会提示：warning C4624: “Base”: 未能生成析构函数，因为基类析构函数不可访问或已被删除
    class Base : public SealedClass {
    };

    int main() {
        SealedClass *p = GetInstance();//为什么可以这么调用？没明白？
        //Base base;    // error
        return 0;
    }


**没明白，对于友元函数还是要总结下的。而且，要知道什么时候使用友元函数，这种函数创造出来是为了解决什么问题的？**


### 友元类实现




    #include <iostream>
    using namespace std;

    class CNoHeritance {
        friend class SealedClass;
    private:
        CNoHeritance() {}
        ~CNoHeritance() {}
    };

    class SealedClass : virtual public CNoHeritance {
    public:
        SealedClass() {}
        ~SealedClass() {}
    };


    // class Base : public SealedClass {
    // public:
    //     Base() :SealedClass() {}//会提示  "CNoHeritance::CNoHeritance()" (已声明 所在行数:7) 不可访问
    //     ~Base() {}//会提示  "CNoHeritance::~CNoHeritance()" (已声明 所在行数:8) 不可访问
    // };

    int main() {
        SealedClass  sc;
        //Base base;
        return 0;
    }


**没看明白，而且友元类也要总结一下，为什么要使用友元类？**


    #include <iostream>
    using namespace std;

    template <typename T>
    class CNoHeritance {
        friend T;
    private:
        CNoHeritance() {}
        ~CNoHeritance() {}
    };

    class SealedClass : virtual public CNoHeritance<SealedClass> {
    public:
        SealedClass() {}
        ~SealedClass() {}
    };

    int main() {
        SealedClass  sc;
        return 0;
    }






* * *





# COMMENT
