---
author: evo
comments: true
date: 2018-05-30 02:59:58+00:00
layout: post
link: http://106.15.37.116/2018/05/30/%e7%ae%97%e6%b3%95%ef%bc%9a%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e5%ba%8f%e5%88%97%e5%8c%96%e4%ba%8c%e5%8f%89%e6%a0%91'
title: 算法：序列化二叉树
wordpress_id: 7009
categories:
- 基础程序设计
tags:
- ordinary algorithm
---

<!-- more -->

[mathjax]

**注：非原创，所有版权属于原作者，原文已列在 ORIGINAL 中。为了方便个人学习做了整合、修改，仅供个人学习使用。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa





# 题目




## **题目描述**


请实现两个函数，分别用来序列化和反序列化二叉树。这里没有规定序列化的方式。






# 题目解答




## 遍历二叉树


其实这道题约定的序列化没有固定的格式，只要你序列化后的结果，再反序列化后与原树相同即可，因此我们可以随意指定自己的格式，比如空节点用$表示，或则#表示，然后遍历采用先序、中序、后序或者层次都可以。

示例程序中采用空结点用#表示，结点与结点用逗号 , 分隔。

选择了合适的遍历算法，那么剩下的问题就是字符串序列和整数权值的相互转换问题，可以参考  [字符串与数字的转换](http://106.15.37.116/2018/05/30/c-%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%b8%8e%e6%95%b0%e5%ad%97%e7%9a%84%e8%bd%ac%e6%8d%a2/) 。


## 先序方式


用递归实现

序列化二叉树，按照先序遍历二叉树的顺序，先左节点，后右节点，当到‘#’时候，说明左节点或者右节点为NULL，同样反序列二叉树也一个道理，需要注意的是在序列和反序列二叉树的时候，注意字符串与整数的转换，一般字符串转换为整数，用迭代循环实现

    
    #include <iostream>
    #include <sstream>
    #include <vector>
    #include <cstring>
    using namespace std;
    
    struct TreeNode {
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
        TreeNode(int x = 0) :
            val(x), left(NULL), right(NULL) {
        }
    };
    
    
    class Solution {
    public:
        /*  序列化二叉树  */
        char* Serialize(TreeNode *root) {
            if (root == NULL) {
                char *serial = new char[3];
                strcpy_s(serial, sizeof(char)* 3, "#,");
                return serial;
            }
            string str;
            Serialize(root, str);
            const char  *c_str = str.c_str();
            char        *serial = new char[str.length() + 1];
    
            strcpy_s(serial, sizeof(char)*(str.length() + 1), c_str);
            return serial;
        }
    
        TreeNode* Deserialize(char *str) {
            if (str == NULL || *str == '\0') {
                return NULL;
            }
            int index = 0;
            return Deserialize(str, index);
        }
    
    private:
        void Serialize(TreeNode *root, string &str) {
            if (root == NULL) {
                str += "#,";
                return;
            }
            /*  先序遍历的方式, 序列化二叉树  */
            str += (toString(root->val) + ",");
            Serialize(root->left, str);
            Serialize(root->right, str);
        }
    
    
        /*  反序列化二叉树
        *  将一个序列化的字符串转换成二叉树  */
        TreeNode* Deserialize(char *str, int &index) {
            if (str[index] == '#') {
                index += 2;
                return NULL;
            }
    
            /*  获取到节点的数字权值  */
            int num = 0;
            while (str[index] != ',' && str[index] != '\0') {
                num = num * 10 + (str[index] - '0');
                index++;
            }
            index++;
    
            TreeNode *root = new TreeNode(num);
            root->left = Deserialize(str, index);
            root->right = Deserialize(str, index);
    
            return root;
        }
        string toString(int num) {
            stringstream ss;
            ss << num;
            return ss.str();
        }
    };
    
    
    int main() {
        TreeNode tree[7];
        tree[0].val = 8;
        tree[0].left = &tree[1];
        tree[0].right = &tree[2];
        tree[1].val = 6;
        tree[1].left = &tree[3];
        tree[1].right = &tree[4];
        tree[2].val = 10;
        tree[2].left = &tree[5];
        tree[2].right = &tree[6];
        tree[3].val = 5;
        tree[3].left = NULL;
        tree[3].right = NULL;
        tree[4].val = 7;
        tree[4].left = NULL;
        tree[4].right = NULL;
        tree[5].val = 9;
        tree[5].left = NULL;
        tree[5].right = NULL;
        tree[6].val = 11;
        tree[6].left = NULL;
        tree[6].right = NULL;
    
        Solution solu;
        cout << solu.Serialize(tree) << endl;
        cout << solu.Serialize(solu.Deserialize(solu.Serialize(tree))) << endl;
        return 0;
    }


输出：

    
    8,6,5,#,#,7,#,#,10,9,#,#,11,#,#,
    8,6,5,#,#,7,#,#,10,9,#,#,11,#,#,




示例程序中将整数转换为字符串使用了stringstream, 当然我们可以充分的使用stringstream

来完成序列化的读取, 如下所示：**没看，要看下。**

    
    #include <iostream>
    #include <sstream>
    #include <vector>
    #include <cstring>
    using namespace std;
    
    struct TreeNode {
        int val;
        struct TreeNode *left;
        struct TreeNode *right;
        TreeNode(int x = 0) :
            val(x), left(NULL), right(NULL) {
        }
    };
    
    #define DELIMITERS  " "
    class Solution {
        /*  先序遍历  */
        void PreOrder(TreeNode *node, stringstream &out) {
            if (node == NULL) {
                out << "#" << DELIMITERS;
                return;
            }
            out << node->val << DELIMITERS;
            PreOrder(node->left, out);
            PreOrder(node->right, out);
        }
    
        /*   从字符流in中读取出数字num
        *   成功返回true
        *   失败返回false  */
        bool GetNumber(stringstream &in, int &number) {
            char buf[20];
    
            /* 这里会有个问题, 只能以空格或者换行符分割
            * 然后直接in >>buf读入单个节点的数据 */
            in >> buf;
            if (buf[0] == '#') {
                return false;
            }
            number = atoi(buf);
            return true;
        }
    
        TreeNode* Construct(stringstream &in) {
            int val;
            if (GetNumber(in, val)) {
                TreeNode *node = new TreeNode(val);
                node->left = Construct(in);
                node->right = Construct(in);
                return node;
            }
            return NULL;
        }
    
    public:
    
        char* Serialize(TreeNode *root) {
            stringstream ss;
    
            PreOrder(root, ss);
            const char *c_str = ss.str().c_str();
            char *serial = new char[ss.str().length() + 1];
            strcpy(serial, c_str);
            return serial;
        }
        TreeNode* Deserialize(char *c_str) {
            if (!c_str) return NULL;
            string str(c_str);
            stringstream ss(str);
            return Construct(ss);
        }
    };
    
    
    int main() {
        TreeNode tree[7];
        tree[0].val = 8;
        tree[0].left = &tree[1];
        tree[0].right = &tree[2];
        tree[1].val = 6;
        tree[1].left = &tree[3];
        tree[1].right = &tree[4];
        tree[2].val = 10;
        tree[2].left = &tree[5];
        tree[2].right = &tree[6];
        tree[3].val = 5;
        tree[3].left = NULL;
        tree[3].right = NULL;
        tree[4].val = 7;
        tree[4].left = NULL;
        tree[4].right = NULL;
        tree[5].val = 9;
        tree[5].left = NULL;
        tree[5].right = NULL;
        tree[6].val = 11;
        tree[6].left = NULL;
        tree[6].right = NULL;
    
        Solution solu;
        cout << solu.Serialize(tree) << endl;
        cout << solu.Serialize(solu.Deserialize(solu.Serialize(tree))) << endl;
        return 0;
    }














* * *





# COMMENT



