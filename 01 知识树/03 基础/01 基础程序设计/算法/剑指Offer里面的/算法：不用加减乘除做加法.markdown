
# REF
- [CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO






  * **asm 不知道。要总结下。**





* * *





# INTRODUCTION






  * aaa





# 题目




## **题目描述**


写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。


## **样例输入**






  * 3  4


  * 7  9




## **样例输出**






  * 7


  * 16





# 题目解答




## C/C++ 内敛汇编


**没看懂，为什么是可以的？ asm 不知道。**

通过内敛汇编我们直接使用 add 指令来进行相加操作。C/C++内敛汇编使用AT&T汇编语法。




  * 在INTEL语法中，第一个表示目的操作数，第二个表示源操作数，赋值方向从右向左。


  * AT&T语法第一个为源操作数，第二个为目的操作数，方向从左到右，合乎自然。




    #include <iostream>
    #include <stdio.h>
    using namespace std;

    class Solution {
    public:
    	int Add(int left, int right) {
    		__asm __volatile__
    			(
    			"addl %1,%0;\n"     /* 相当于 add b, a结果存储在a中*/
    			: "=m"(left)
    			: "r"(right), "m"(left)
    			//  :
    			);
    		return left;
    	}
    };


    int main() {
    	Solution solu;
    	cout << solu.Add(5,7) << endl;
    	return 0;
    }



**代码报错了，不知道怎么改。**




## 使用位运算来模拟加法


如何用位运算来模拟加法操作呢

基本的位操作符有与、或、异或、取反、左移、右移这6种，它们的运算规则如下所示：
<table >

<tr >
符号
描述
运算规则
</tr>

<tbody >
<tr >

<td style="width: 47px; text-align: center;" >&
</td>

<td style="width: 69px; text-align: center;" align="center" >与
</td>

<td style="width: 507px;" align="right" >有0则0, 全1则1(两个位都为1时，结果才为1)
</td>
</tr>
<tr >

<td style="width: 47px; text-align: center;" >|
</td>

<td style="width: 69px; text-align: center;" align="center" >或
</td>

<td style="width: 507px;" align="right" >有1则1, 全0则0(两个位都为0时，结果才为0)
</td>
</tr>
<tr >

<td style="width: 47px; text-align: center;" >^
</td>

<td style="width: 69px; text-align: center;" align="center" >异或
</td>

<td style="width: 507px;" align="right" >相同则0, 不同则1
</td>
</tr>
<tr >

<td style="width: 47px; text-align: center;" >~
</td>

<td style="width: 69px; text-align: center;" align="center" >取反
</td>

<td style="width: 507px;" align="right" >0变1, 1变0
</td>
</tr>
<tr >

<td style="width: 47px; text-align: center;" ><<
</td>

<td style="width: 69px; text-align: center;" align="center" >左移
</td>

<td style="width: 507px;" align="right" >各二进位全部左移若干位，高位丢弃，低位补0
</td>
</tr>
<tr >

<td style="width: 47px; text-align: center;" >>>
</td>

<td style="width: 69px; text-align: center;" align="center" >右移
</td>

<td style="width: 507px;" align="right" >各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）
</td>
</tr>
</tbody>
</table>
OK，这么多位运算的规则，我们能不能用来模拟加法呢？




  * 如果不带进位的话：我们可以用异或来模拟不带进位的加法运算，因为异或相同则 0，不同则 1，正好与不带进位的加法结果相同。


  * 那么进位要怎么处理呢？


    * 首先，我们怎么判断要进位呢？进位的产生主要是1+1=10，因此可以用与操作来判断两个位是不是需要进位。


    * 那么怎么表示进位呢？进位无非是进到上一位去，因此我们直接把与的结果左移一位就可以表示进位。





OK，按照上面的处理方法，我们就能得到两个数：


  * 一个是：异或运算得出的不带进位的结果


  * 一个是：两个数相与再左移后得到的所有进位


嗯，下面就OK了，我们直接反复将两个数进行上述的加法操作， 直到没有进位，那么这个时候的结果就是我们想要的。**利害的。**

举个例子  5+7=12 ：

首先看十进制是如何做的：




  1. 相加各位的值，不算进位，得到5 + 7 = 2（不算进位）


  2. 看进位值，得到10。 如果这一步的进位值为 0，那么第一步得到的值就是最终结果。


  3. 重复上述两步，只是相加的值变成上述两步的得到的结果 2 和 10，得到 12。


再看一下二进制值如何做： 5 -> 101     7 -> 111


  1. 相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111=010


  2. 计算进位值，得到 1010，相当于各位做与操作得到 101，再向左移一位得到 1010，(101&111)<<1。


  3. 重复上述两步， 各位相加 010^1010=1000，进位值为 100=(010&1010)<<1。


  4. 继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。


OK，完整代码如下：


    #include <iostream>
    #include <stdio.h>
    using namespace std;

    class Solution {
    public:
    	int Add(int left, int right) {
    		int temp;
    		while (right != 0) {
    			temp = left ^ right;                //  计算不带进位的情况
    			right = (left & right) << 1;         //  计算进位
    			left = temp;
    		}
    		return left;
    	}
    };


    int main() {
    	Solution solu;
    	cout << solu.Add(5,7) << endl;
    	return 0;
    }



输出：


    12


我们也可以用递归来实现：


    #include <iostream>
    #include <stdio.h>
    using namespace std;

    class Solution {
    public:
    	int Add(int left, int right) {
    		return right == 0 ? left : Add(left ^ right, (left & right) << 1);
    	}
    };


    int main() {
    	Solution solu;
    	cout << solu.Add(5, 7) << endl;
    	return 0;
    }



输出：


    12












* * *





# COMMENT
