---
author: evo
comments: true
date: 2018-05-15 06:04:36+00:00
layout: post
link: http://106.15.37.116/2018/05/15/%e7%ae%97%e6%b3%95%ef%bc%9a%e6%97%8b%e8%bd%ac%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e6%9c%80%e5%b0%8f%e6%95%b0%e5%ad%97/
slug: '%e7%ae%97%e6%b3%95%ef%bc%9a%e6%97%8b%e8%bd%ac%e6%95%b0%e7%bb%84%e4%b8%ad%e7%9a%84%e6%9c%80%e5%b0%8f%e6%95%b0%e5%ad%97'
title: 算法：旋转数组中的最小数字
wordpress_id: 5778
categories:
- 随想与反思
tags:
- NOT_ADD
---

<!-- more -->

[mathjax]

**注：非原创，只是按照自己的思路做了整合，修改。推荐直接看 ORIGINAL 中所列的原文。**


# ORIGINAL





 	
  1. 


[CodingInterviews](https://github.com/gatieme/CodingInterviews)







# TODO





 	
  * aaa





* * *





# INTRODUCTION





 	
  * aaa




# 题目




## 题目描述


什么是数组的旋转：把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。

因此 {3,4,5,1,2} 就是原序列 {1,2,3,4,5}  的一个旋转序列。

OK，现在我们有一个给定这个非递减序列旋转后的序列，要求输出旋转数组的最小元素。

比如给定 {3,4,5,1,2}  求这个数组的最小值也就是1。


# 问题解答




## 最直接的想法，遍历




既然是求最小值，那么我直接遍历一趟就可以找到最小值。复杂度是O(n)。

代码如下：

    
    #include <iostream>
    #include <vector>
    using namespace std;
    
    class Solution {
    public:
    	int minNumberInRotateArray(vector<int> rotateArray) {
    		if (rotateArray.size() == 0) {
    			return 0;
    		}
    		int min = INT_MAX;//这个是int的最大值吗？
    		for (int i = 0; i < rotateArray.size(); i++) {
    			if (rotateArray[i] < min) {
    				min = rotateArray[i];
    			}
    		}
    		return min;
    	}
    };
    
    
    int main() {
    	int a[] = { 3, 4, 5, 1, 2 };
    	vector<int> vec(a, a + 5);//这种初始化是怎么初始化的？
    
    	Solution solu;
    	cout << solu.minNumberInRotateArray(vec) << endl;
    
    	return 0;
    }


输出：

    
    1




## 其实这个非递增序列的旋转序列的最小值就在它的最大值后面


我们发现，题目中说到，这个旋转后的序列的原序列是非递减序列。也就是说，原序列的值是一直增大或相等的，那么它的旋转序列的最小值肯定出现在序列的最大值后面。而这只有在这个地方，前一个值才会大于后一个值。

因此，代码如下：

    
    #include <iostream>
    #include <vector>
    using namespace std;
    
    class Solution {
    public:
    	int minNumberInRotateArray(vector<int> rotateArray) {
    		for (int i = 0; i < rotateArray.size(); i++) {
    			if (rotateArray[i] > rotateArray[i + 1]) {
    				return rotateArray[i + 1];
    			}
    		}
    		return rotateArray[0];
    	}
    };
    
    int main() {
    
    	int a[] = { 3, 4, 5, 1, 2 };
    	vector<int> vec(a, a + 5);
    
    	Solution solu;
    	cout << solu.minNumberInRotateArray(vec) << endl;
    
    	return 0;
    }


输出：

    
    1


OK，虽然好像是有了变化，但是复杂度与之前的方法一样，那么有什么可以在这个基础上进行提升的呢？


## 尝试使用一下二分查找


我们继续看这个旋转后的序列，它实际上可以分为两个排序的子数组，而且前面的子数组的元素都大于或者等于后面子数组的元素，而且，最小的元素刚好是这两个子数组的分界线。

OK，我们可以在这个基础上应用二分查找法：**（为什么这个场景可以想出二分查找？二分查找的应用场景一般时什么？）**



 	
  1. 首先我们用两个指针，分别指向数组的第一个元素和最后一个元素。按照题目旋转的规则，第一个元素应该是大于或者等于最后一个元素的（这其实不完全对，还有特例。后面再讨论特例）。

 	
  2. 然后我们看**数组中间的元素：**

 	
    * 如果这个元素位于前面的递增子数组，那么它应该大于或者等于第一个指针指向的元素。也就是说：此时数组中最小的元素应该位于该中间 元素的后面。因此，我们可以把第一指针指向该中间元素，这样可以缩小寻找的范围。

 	
    * 同样，如果中间元素位于后面的递增子数组，那么它应该小于或者等于第二个指针指 向的元素。此时该数组中最小的元素应该位于该中间元素的前面。我们可以把第二个指针指向该中间元素，这样同样可以缩小寻找的范围。




 	
  3. 我们接着再用更新之后的 两个指针，去得到和比较新的中间元素，循环下去。


按照上面的思路，我们的第一个指针总是指向前面递增数组的元素，而第二个指针总是指向后面递增数组的元素。

当最后一轮时，第一个指针将指向前面子数组的最后一个元素， 第二个指针会指向后面子数组的第一个元素。也就是它们最终会指向两个相邻的元素，而第二个指针指向的刚好是最小的元素。

这就是循环结束的条件。

OK，上面的思路好像看起来好像没什么问题，但是：上面的 2 中的两个判断实际上是有可能有问题的，因为：如果中间的值与两个指针的值相等，那么这个时候你就没有办法判断这个中间值是属于前面的数组还是后面的数组了。这个时候，书上是通过添加一个顺序查找来解决这个问题的，也就是说这种情况就不再使用二分法了。

完整代码如下：

    
    #include <iostream>
    #include <vector>
    using namespace std;
    
    
    class Solution {
    public:
    	int minNumberInRotateArray(vector<int> rotateArray) {
    		//判断是不是空数组
    		if (rotateArray.size() == 0) {
    			cout << "非法输入" << endl;
    			return 0;
    		}
    
    		int index_low = 0;
    		int index_mid = 0;
    		int index_high = rotateArray.size() - 1;
    
    		//  判断数组是否真的旋转了
    		if (rotateArray[index_low] < rotateArray[index_high]) {
    			cout << "数组未被旋转" << endl;
    			return 0;
    		}
    
    		//开始二分查找
    		while (rotateArray[index_low] >= rotateArray[index_high]) {
    			cout << "circle";
    			//  前一个元素与后一个元素差一位  说明找到了最大最小的元素
    			if (index_high - index_low == 1) {
    				index_mid = index_high;
    				cout << "b";
    				break;
    			}
    
    			index_mid = (index_low + index_high) / 2;
    
    			// 注意：三者相等的时候，无法确定中间元素是属于前面还是后面的递增子数组，只能顺序查找
    			if (rotateArray[index_low] == rotateArray[index_mid]
    				&& rotateArray[index_mid] == rotateArray[index_high]) {
    				cout << "low == mid == high, 因此只能顺序查找 " << endl;
    				index_mid = OrderFindMid(rotateArray, index_low, index_high);
    				break;
    			}
    			// 如果大于或者等于第一个指针指向的元素，说明属于前面的递增子数组
    			if (rotateArray[index_mid] >= rotateArray[index_low]) {
    				index_low = index_mid;
    			}
    			// 如果小于或者等于第而个指针指向的元素，说明属于后面的递增子数组
    			else if (rotateArray[index_mid] <= rotateArray[index_high]) {
    				index_high = index_mid;
    			}
    
    
    			cout << "low index = " << index_low
    				<< " mid index = " << index_mid
    				<< " high index = " << index_high << endl;
    
    		}
    		return rotateArray[index_mid];
    	}
    
    private:
    	// 顺序寻找最小值
    	int OrderFindMid(vector<int> &num, int low, int high) {
    		int result = num[low];
    		int index_mid = low;
    		for (int i = low + 1; i < high; i++) {
    			if (num[i] < result) {
    				result = num[i];
    				index_mid = i;
    			}
    		}
    		return index_mid;
    	}
    };
    
    int main() {
    
    	int a[] = { 1, 0, 1, 1, 1, };
    	vector<int> vec(a, a + 5);
    
    	Solution solu;
    	cout << solu.minNumberInRotateArray(vec) << endl;
    
    	return 0;
    }


输出：

    
    circlelow == mid == high, 因此只能顺序查找
    0


实际上，感觉当三者相等的时候可以调节一下low或者high，比如low++或者high--，不过这样就不能用while (rotateArray[index_low] >= rotateArray[index_high]) 了，因为这种low++或者high--可能会使得low和high不在自己的子数组里面。**要试一下然后补充。**















* * *





# COMMENT



