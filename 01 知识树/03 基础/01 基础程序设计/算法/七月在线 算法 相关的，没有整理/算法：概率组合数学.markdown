
# 稳定婚姻策略的Gale-Shapley算法


婚介所登记了N位男孩和N位女孩，每个男
孩都对N个女孩的喜欢程度做了排序，每个
女孩都对N个男孩的喜欢程度做了排序。你
作为月老，能否给出稳定的牵手方案？
 分析：每个男孩都对N个女孩做了排序，N个男
孩的钟情度形成N×N的矩阵A；同时， N个女
孩的钟情度形成N×N的矩阵B；
 如果男孩i和女孩a牵手，但男孩i对女孩b更喜
欢，而女孩b的男友j拼不过男孩i，则没有力量
阻碍男孩i和女孩b的私奔，这即是不稳定的。


## 题目解析


 采取贪心的思路：
 所有男孩同时对各自最喜欢的女孩表白：
 若女孩a只有1个男孩i表白，接受男孩i；
 若女孩a有多位男孩表白，选择她最喜欢的男孩x
 若女孩a没有男孩表白，静静等待下一轮。
 第k轮，所有单身男孩对各自第k喜欢的女孩表白：
 无论该女孩是否有男友；
 若女孩a收到了男孩i的表白：
 若女孩a没有男友，则接受男孩i；
 若相对于现任男友j，女孩a更喜欢男孩i，则接受男孩i；


## 正确性分析：匹配性和稳定性


 在某个时刻，任何一个女孩要么已经有了男友，要么还会有男
孩对其表白(她此刻没有男友，说明还有单身男孩，所以，该女
孩不用着急，只需等待)，她总可以在表白的男孩中选择一个自
己最喜欢的，因此，任何一个女孩必然都能找到男友。
 因为“N-N”的比例关系，这也导致了每个男孩都能有女友。
 不稳定情况：如果男孩i和女孩a牵手，但男孩i对女孩b更喜欢，
而女孩b的男友j拼不过男孩i，则男孩i和女孩b的私奔。
 1、男孩i和女孩a牵手
 2、男孩i对女孩b更喜欢
 3、相对于男友j，女孩b的更喜欢男孩i
 打破上述三个前提中的一个：1和2说明男孩i曾经向女孩b表白
却遭拒，这说明相对于男孩i，女孩b的更喜欢现任男友j。


## Code




![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac586b58f7d1.png)





## 改进 相互表白的策略？


 首轮a：所有男孩同时对各自最喜欢的女孩表白：
 若女孩a只有1个男孩i表白，接受男孩i；
 若女孩a有多位男孩表白，选择她最喜欢的男孩x
 若女孩a没有男孩表白，静静等待下一轮。
 首轮b：所有女孩同时对各自最喜欢的男孩表白：
 策略同a
 第k轮a：所有单身男孩对各自第k喜欢的女孩表白：
 无论该女孩是否有男友；
 若女孩a收到了男孩i的表白：
 若女孩a没有男友，则接受男孩i；
 若相对于现任男友j，女孩a更喜欢男孩i，则接受男孩i；
 第k轮b：所有单身女孩对各自第k喜欢的男孩表白：
 策略同a


## 一个反例


男女孩各3位：
 每个男孩的钟情度矩阵为：
 每个女孩的钟情度矩阵为：
 一个可行解为：2、0、1


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac586dbd46a1.png)





## 算法的思考和总结


 本算法能够解决这种情况吗？
 如果男孩i和女孩j牵手，但男孩i对女孩a更喜
欢，而女孩a的男友b却更喜欢女孩j。
 这即著名的对稳定婚姻策略的Gale-Shapley
算法，由于女孩选择对其表白的男孩的最优
者，因此也称为延迟认可算法。
 可用于学生志愿填报(员工选择职位、毕业生选
择单位)等“二部”问题。
 如果没有“有向边”，则该算法不适用。




# 求1的个数


 给定一个32位无符号整数N，求整数N的二
进制数中1的个数。
 显然：可以通过不断的将整数N右移，判断当前
数字的最低位是否为1，直到整数N为0为止。
 平均情况下，大约需要16次移位和16次加法。
 有其他更精巧的办法吗？


## 两种常规Code


 思路1：
 每次右移一位
 奇数则累加1
 思路2：
 每次最低位清0
 只需要n&=(n-1)即可


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac586ff0337a.png)





## 分治


 假定能够求出N的高16位中1的个数a和低16位中1的
个数b，则a+b即为所求。
 为了节省空间，用一个32位整数保存a和b：
 高16位记录a，低16位记录b，
 (0xFFFF0000&N)筛选得到a；
 (0x0000FFFF&N)筛选得到b；
 (0xFFFF0000&N) + (0x0000FFFF&N)>>16
 如何得到高16位中1的个数a呢？
 如何得到低16位中1的个数b呢？
 递归


## 递归过程


 如果二进制数N是16位，则统计N的高8位和低8位各自1的数目a
和b，而a、b用某一个16位数X存储，则使用0xFF00、0x00FF分
别于X做与操作，筛选出a和b；
 原问题中的数据是32位，因此需要2个0xFF00/0x00FF，即
0xFF00FF00/0x00FF00FF
 如果二进制数是8位，则统计高4位和低4位各自1的数目，使用
0xF0/0x0F分别做与操作，筛选出高4位和低4位；
 需要4个0xF0/0x0F，即0xF0F0F0F0/0x0F0F0F0F
 如果是4位则统计高2位和低2位各自1的数目，用0xC/0x3筛选；
 需要8个0xC/0x3 ，即0xCCCCCCCC/0x33333333
 如果是2位则统计高1位和低1位各自1的数目，用0x2/0x1筛选；
 需要16个0x2/0x1 ，即 0xAAAAAAAA/0x55555555


## Code




![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58721de7d4.png)





## 总结与应用


 HammingWeight使用了分治/递归的思想，将
问题巧妙解决，降低了运算次数。
 还可以使用其他分组方案，如3位一组等。
 如果定义两个长度相等的0/1串中对应位不相
同的个数为海明距离(即码距)，则某0/1串和
全0串的海明距离即为这个0/1串中1的个数。
 两个0/1串的海明距离，即两个串异或值的1
的数目，因此，该问题在信息编码等诸多领
域有广泛应用。


# 猜数字游戏


 两个聪明人A和B玩猜数字的游戏。他们在脑门上
各贴一个正整数数字，两个数字只相差1，A和B只
能看到对方的数组而看不到自己的。
 以下是两人的对话：
 A：我不知道
 B：我也不知道
 A：我知道了
 B：我也知道了
 上述4句对话结束后，聪明的你帮助A、B推算下，
他们的数字各是多少呢？


## 引理


 引理1：如果A看到B是1，则A马上可以断
定：自己是2。
 因为条件给定了数字都是正整数。
 引理2 ：如果A看到B是2，并且B说“我不知
道”，则A马上可以断定：自己是3。
 因为A根据B是2可以推断自己是1或者3；
 如果自己是1，根据引理1，B会说“我知道”。


## 考察“A是3，B是2”这种情况


 第一次，A看到2，无法判断自己是1或3，只好说不
知道；
 第二次，B看到3，无法判断自己是2或4，只好说不
知道；
 第三次，A得知了“B不知道”，因此，B看到的一定
不是1(根据引理1)，所以，A断定了自己是3；
 第四次，B得知了“A知道”，因此，A如果看到4是
无法断定自己是3还是5，因此，A一定是看到了自
己是2。

考察“A是4，B是3”这种情况
 前两次，A看到3，B看到4，无法判断自己是几，都说不知道；
 第三次，A的心理活动：
 可以断定我是4而不可能是2。理由如下：
 整理当前信息：假定我是2，且我说“我不知道”。根据引理2，
B一定会断定自己是3。与当前B说“我不知道”矛盾。
 第四次，B的心理活动：
 可以断定自己是3而不可能是5。理由如下：
 整理当前信息：假定A看到我是5，A会猜测他自己是4或者6
 如果A自己是4或者6，A和我都会顺次说“我不知道”；
 因此，A无法得出自己是5的结论。
 我不是5，那么我只能是3。


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5876f34084.png)





## 逻辑总结


 复杂的逻辑题可以用二叉树(N叉树)做辅助
推理，原理是：只要某个结点的两个孩子
(所有孩子)都不可能，则这个结点不可能。
 如A4B3情况下，A的推理树如右上图所示。
 注意：两人的说话顺序是有决定作用的，是
不对称消息：
 A说话，则A是在看到B的内容后做判断，B可根
据A的内容在自己的推理树上做剪枝。


# Jump


 跳跃问题
 给定非负整数数组，初始时在数组起始位置
放置一机器人，数组的每个元素表示在当前
位置机器人最大能够跳跃的数目。它的目的
是用最少的步数到达数组末端。例如：给定
数组A=[2,3,1,1,2]，最少跳步数目是2，对应
的跳法是：232。
 如：2,3,1,1,2,4,1,1,6,1,7，最少需要几步？

跳跃问题分析


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58796ca6f2.png)





## 跳跃问题算法步骤


初始步数step赋值为0；
 记当前步的控制范围是[i,j]，则用k遍历i到j
 计算A[k]+k的最大值，记做j2；
 step++；继续遍历[j+1,j2]；


## Code




![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac587e606651.png)





## Jump问题“知识挖掘”


 上述代码的时间复杂度是多少？
 O(N) or O(N 2 )
 该算法能够天然处理无法跳跃到末尾的情况。
 若无法跳到莫问，则返回-1
 该算法在每次跳跃中，都是尽量跳的更远，并记录j2——属于贪心
法；也可以认为是从区间[i,j](若干结点)扩展下一层区间[j+1,j2] (若
干子结点)——属于广度优先搜索。
 可见，贪心法是需要详细分析才能放心使用。
 回忆图论中的概要说明：
 广度优先搜索往往和“最少”、“最短”相关联。
 思考：是否可以使用动态规划解决？
 记dp[i]为：到达A[i]时，还剩余多少步没有用。
 则：dp[i+1]=max(dp[i],A[i])-1


## 计算概率


 A、B两国元首相约在首都机场晚20点至24
点交换一份重要文件。如果A国的飞机先
到，A会等待1个小时；如果B国的飞机先到
了，B会等待2个小时。假设两架飞机在20点
至24点降落机场的概率是均匀分布，试计算
能够在20点至24点完成交换的概率。
 假设交换文件本身不需要时间。




## 事件的形式化表达


 假定A到达的时刻为x，B达到的时刻为y，
则完成交接需满足0<y-x<1或者0<x-y<2；
 同时要求24<x<20，24<y<20；
 由于x，y系数都为1，为作图方便，可以将
24<x<20，24<y<20平移成4<x<0，4<y<0。

计算面积
 三角形面积
 9/2、2
 矩形面积
 16
 概率
 19/32


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5881275f0d.png)





# 商品推荐


 商品推荐场景中过于聚焦的商品推荐往往会损害用
户的购物体验，在有些场景中，系统会通过一定程
度的随机性给用户带来发现的惊喜感。
 假设在某推荐场景中，经计算A和B两个商品与当
前访问用户的匹配度分别为0.8分和0.2分，系统将
随机为A生成一个均匀分布于0到0.8的最终得分，
为B生成一个均匀分布于0到0.2的最终得分，试计
算最终B的分数大于A的分数的概率。


## 商品推荐


 A=B的直线上方区域，即为B>A的情况。
 S 蓝色 =0.02 S 矩形 =0.16
 p=0.02/0.16=0.125


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac588297b1dd.png)





# 圆内均匀取点


 给定定点O(x 0 ,y 0 )和半径r，使得二维随机点
(x,y)等概率落在圆内。
 分析
 因为均匀分布的数据是具有平移不变性，生成
半径为r，定点为圆心的随机数(x 1 ,y 1 )，然后平移
得到(x 1 +x 0 ,y 1 +y 0 )即可。
 直接使用x=r*cosθ，y=r*sinθ是否可以呢？
 具体试验一下。




## 圆内均匀取点代码与效果




![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac588416d6b1.png)





## 代码与效果


 显然上述做法是不对的。但可以使用二维随
机点的做法，若落在圆外，则重新生成点。
结果如下。


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5886a66ab1.png)





## 思想分析


 不是每次生成随机数都能退出该算法
 有一定的接受率。
 思考：
 以多大的概率1次退出：接受率是多少？
 得到随机数的需要的平均次数(期望)是多少？
 利用该方法计算圆周率？
 这个做法简洁、有效，值得推荐；
 许多相关问题，往往可以如此解决。


# 一定接受率下的采样


 已知有个rand7()的函数，返回1到7随机自然
数，让利用这个rand7()构造rand10() 随机
1~10。
 解：因为rand7仅能返回1~7的数字，少于
rand10的数目。因此，多调用一次，从而得
到49种组合。超过10的整数倍部分，直接丢
弃。



代码：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58885605c3.png)





## 圆内均匀取点的1次成功算法(朴素)


问题分析：把随机点看做面积很小的区域，圆内均
匀取点意味着随机点P的面积与圆的面积成正比。
 S p =kS
 S=πr 2 ，与半径的平方成正比
 从而，S p (r)=kπr 2
 将均匀生成的随机数x取平方根赋值给r；则S p (r)即
为均匀分布。
 同时，是与角度θ无关的，即：取均匀分布的随机
数θ作为旋转角即可。

代码与效果


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac588c01cb36.png)


思考：将圆域换成三角形呢？


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac588d5e489a.png)


代码与效果


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac588ee89923.png)





# “概率章节”的进一步思考


 由于三点共面，所以三角形内的所有点必然在某平面上，因
此，上述算法能够方便的推广到三维空间。
 问题：请设计多边形内随机取点算法。
 圆内取点的思想：计算多边形的外包围矩形盒，生成外包围盒
内的二维点，若点在多边形内，则退出；否则，继续探测。
 将多边形剖分成三角形集合，调用三角形内均匀取点算法。
 算法2思路：
 按照面积为权重，选择某个三角形；
 生成该三角形内的随机点。
 拓展
 每首歌有不同的分值，设计算法，根据分值随机推荐歌曲。
 如何将多边形快速剖分成三角形？ 注：Delaunay三角剖分


# 分值推荐


 假定歌曲库中N首歌，每首歌给定一个整数
分数。现在要求从N首歌中随机选择若干首
推荐给用户，要求推荐的这些歌是和其分数
作为正比的。
 给定整数数组A[0…N-1]，按照A[i]的值作为
权值随机取数。


# 分析


 根据权值A[0…N-1]计算累积权值B[0…N-1]
 B 0 =A 0
 B i =B i-1 +A i
 区间[B i-1 , B i )对应元素A i


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5890e86ed2.png)


Code：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58915cbbe8.png)





## 另外的思路


 计算所有歌的权值和sum，每首歌的权值除
以sum，认为是各自的概率P[0…N-1]；
 等概率选择nSong∈[0,N-1)
 生成p∈[0,1]，若p＜P[nSong]，则选择
nSong，否则，计算随机生成新的nSong，继
续探测。

Code：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5892916c63.png)





## 试验结果


 初始值：song = {43,63,43,89,322,2,5,32}
 真实概率：
 0.0718 0.105 0.0718 0.149 0.538 0.00334 0.00835 0.0534
 算法1
 10 3 ：0.073 0.096 0.077 0.152 0.536 0.004 0.013 0.049
 10 4 ：0.0758 0.107 0.0723 0.143 0.54 0.0028 0.0087 0.0505
 算法2
 10 3 ： 0.076 0.095 0.084 0.137 0.539 0.003 0.008 0.058
 10 4 ：0.0719 0.101 0.0726 0.144 0.542 0.0025 0.0093 0.0567


## 思考


 给定N个数，设计算法，输出随机排列的一
个结果。
 要求：输出任何一个排列的概率是相同的。
 STL std::random_shuffle

Code：


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5894b4cbe5.png)


Code2:


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58959556d0.png)





# 金钗赠诗问题


 赛诗会后，十二金钗待奔前程。分别宴上，
12人各写一首诗放入宝囊。大家任取，若取
到自己的诗，则再取一首并放回自己的诗。
12人都拿到别人的诗作算一种分配。问：共
有多少种不同的分配？

本质即给定n个人写n首诗，要求赠给其他
人，共有多少种分配方法。
 一般提法：1到n的全排列中，第i个数不是i
的排列共有多少种？
 最早是由丹尼尔·伯努利(Danid Bernoulli)提出的
“错位排列”问题。


## 问题分析


 假定n个数的错位排列数目为dp[n]
 先考察数字n的放置方法：显然，n可以放在
从1到n-1的某个位置，共n-1种方法；假定放
在了第k位。
 对于数字k：
 要么放置在第n位，
 要么不放置在第n位。
 下面分别讨论


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58974b9671.png)


数字k放置在第n位
 相当于数字k和数字n交互位置后，其他n-2
个数字做错位排列，因此有dp[n-2]种方法。


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac58986194ab.png)





## 数字k不放置在第n位


 将数字k暂时更名为n(这是可以做到的：因为真正
的n已经放在第k位上，真正的n不再考虑之列)，现
在需要将1到k-1以及k+1到n这n-1个数放置在相应位
置上，要求数字和位置不相同！显然是n-1个数的
错位排列，有dp[n-1]种方法。


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac5898f8d606.png)


错位排列递推公式


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac589ae00ae8.png)


错位排列的通项公式


![](http://106.15.37.116/wp-content/uploads/2018/04/img_5ac589b67aa09.png)


思考题
 毕业典礼后，某宿舍三位同学把自己的毕业
帽扔了，随后每个人随机地拾起帽子，试计
算三个人中没有人选到自己原来带的帽子的
概率。

思考题
 篮球比赛中，两队比分暂时相等。最后一次
各有两次罚球机会中；已知在一次罚球中，
甲队罚球人员投中的概率是0.5，乙队罚球人
员投中的概率是0.6，试计算甲乙战平的概
率。


# COMMENT：




# REF：






  1. 七月在线 算法
